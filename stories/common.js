export const partDescription = `Name of the part attribute of element in shadow tree. Use ::part CSS pseudo-element to modify the styles of the targeted element`;

export const dropdownElementProps = (componentName, disableControl = false) => {
  const argsObj = {
    drop: {
      control: "select",
      options: ["down", "up", "left", "right"],
      defaultValue: "down",
      description: "The drop position of menu relative to the toggle button",
      table: {
        category: `props: ${componentName}`,
        defaultValue: { summary: "down" },
        type: {
          summary: "DropDirection",
        },
      },
    },
    menuAlignRight: {
      control: "boolean",
      description:
        "When true, aligns right edge of menu with right edge of button ",
      table: {
        defaultValue: { summary: "false" },
        category: `props: ${componentName}`,
        type: { summary: "boolean" },
      },
    },
    menuIsOpen: {
      control: "disable",
      description: "When true, dropdown menu shows on first load",
      table: {
        defaultValue: { summary: "false" },
        category: `props: ${componentName}`,
        type: { summary: "boolean" },
      },
    },
    noFlip: {
      control: "boolean",
      description: "Controls auto-flipping of menu",
      table: {
        category: `props: ${componentName}`,
        type: {
          defaultValue: { summary: "false" },
          summary: "boolean",
        },
      },
    },
    popperOpts: {
      control: "object",
      description:
        "Additional configuration to pass to Popper.js. See https://popper.js.org/ for config opts",
      table: {
        category: `props: ${componentName}`,
        defaultValue: { summary: "{}" },
        type: {
          summary: "object",
        },
      },
    },
    togglerId: {
      control: "text",
      description:
        "Forwards value to id attribute of toggle button of Dropdown. An unique id generated by default",
      table: {
        category: `props: ${componentName}`,
      },
    },
    togglerText: {
      control: "text",
      description: "Sets the text content of Dropdown button ",
      table: {
        defaultValue: { summary: "" },
        category: `props: ${componentName}`,
        type: {
          summary: "string",
        },
      },
    },
    variant: {
      control: "select",
      description: "Sets color of Dropdown button",
      options: [
        "primary",
        "secondary",
        "success",
        "danger",
        "warning",
        "info",
        "light",
        "dark",
      ],
      table: {
        category: `props: ${componentName}`,
        defaultValue: { summary: "secondary" },
        type: {
          summary: "DropdownButtonVariant",
        },
      },
    },
    close: {
      control: "select",
      options: ["default", "outside", "inside"],
      description:
        "Controls the close behaviour of dropdown menu. By default menu auto-closes when SgdsDropdownItem or area outside dropdown is clicked",
      table: {
        defaultValue: { summary: "default" },
        category: `props: ${componentName}`,
        type: {
          summary: "string",
        },
      },
    },
    dropdownDisabled: {
      name: "disabled",
      control: "boolean",
      description: "Disables the dropdown toggle",
      table: {
        defaultValue: { summary: "false" },
        category: `props: ${componentName}`,
        type: {
          summary: "string",
        },
      },
    },
    "sgds-select": {
      description:
        "Emitted event from SgdsDropdown element when a the slot item is selected/clicked",
      table: {
        category: `Event: ${componentName}`,
      },
    },
    "sgds-show": {
      description: "Emitted event when show instance is called ",
      table: {
        category: `Event: ${componentName}`,
      },
    },
    "sgds-shown": {
      description:
        "Emitted event when dropdown has been made visible to the user and CSS transitions have completed",
      table: {
        category: `Event: ${componentName}`,
      },
    },
    "sgds-hide": {
      description: "Emitted event when hide instance is called",
      table: {
        category: `Event: ${componentName}`,
      },
    },
    "sgds-hidden": {
      description:
        "Emitted event when the dropdown has finished being hidden from the user and CSS transitions have completed",
      table: {
        category: `Event: ${componentName}`,
      },
    },
    showMenu: {
      control: "disable",
      description: "When invoked, opens the dropdown menu",
      table: {
        category: `Method: ${componentName}`,
        type: {
          summary: "function",
        },
      },
    },
    hideMenu: {
      control: "disable",
      description: "When invoked, hides the dropdown menu",
      table: {
        category: `Method: ${componentName}`,
        type: {
          summary: "function",
        },
      },
    },
  };
  if (disableControl) {
    for (const [key, value] of Object.entries(argsObj)) {
      value.control = "disable";
    }
    return argsObj
  } else return argsObj
};
