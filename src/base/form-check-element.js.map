{"version":3,"file":"form-check-element.js","sourceRoot":"","sources":["form-check-element.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, query } from \"lit/decorators.js\";\nimport { defaultValue } from \"../utils/defaultvalue\";\nimport { FormSubmitController, SgdsFormControl } from \"../utils/form\";\nimport { watch } from \"../utils/watch\";\nimport SgdsElement from \"./sgds-element\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html, nothing } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nexport class FormCheckElement extends SgdsElement implements SgdsFormControl {\n  /**@internal */\n  @query('input[type=\"checkbox\"]') input: HTMLInputElement;\n  /**@internal */\n  private readonly formSubmitController = new FormSubmitController(this, {\n    value: (control: FormCheckElement) => (control.checked ? control.value : undefined),\n    defaultValue: (control: FormCheckElement) => control.defaultChecked,\n    setValue: (control: FormCheckElement, checked: boolean) => (control.checked = checked)\n  });\n\n  /** Name of the HTML form control. Submitted with the form as part of a name/value pair. */\n  @property({ type: String, reflect: true }) name: string;\n\n  /** For aria-label when there is no appropriate text label visible */\n  @property({ type: String, reflect: true }) ariaLabel = \"checkbox\";\n\n  /** Value of the HTML form control. Primarily used to differentiate a list of related checkboxes that have the same name. */\n  @property({ type: String, reflect: true }) value: string;\n\n  /** Makes the checkbox a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n\n  /** Draws the checkbox in a checked state. */\n  @property({ type: Boolean, reflect: true }) checked = false;\n\n  /** Disables the checkbox (so the user can't check / uncheck it). */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** Allows invalidFeedback, invalid and valid styles to be visible with the input */\n  @property({ type: Boolean, reflect: true }) hasFeedback = false;\n\n  /**Feedback text for error state when validated */\n  @property({ type: String, reflect: true }) invalidFeedback?: string;\n\n  /** Aligns the checkbox horizontally */\n  @property({ type: Boolean, reflect: true }) isInline = false;\n\n  /** Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */\n  @defaultValue(\"checked\")\n  defaultChecked = false;\n\n  /** Marks the checkbox input as invalid. Replace the pseudo :invalid selector for absent in custom elements */\n  @property({ type: Boolean, reflect: true }) invalid = false;\n\n  /** Simulates a click on the checkbox. */\n  public click() {\n    this.input.click();\n  }\n  /** Sets focus on the checkbox. */\n  public focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  public blur() {\n    this.input.blur();\n  }\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  public reportValidity() {\n    if (!this.input.reportValidity()) {\n      this.invalid = !this.input.checkValidity();\n    }\n    return this.input.reportValidity();\n  }\n\n  protected _handleChange() {\n    this.checked = !this.checked;\n    this.value = this.input.value;\n    this.emit(\"sgds-change\", { detail: { checked: this.checked, value: this.value } });\n  }\n\n  protected _handleKeyDown(event: KeyboardEvent) {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n    if (event.key === \"Enter\" && !hasModifier) {\n      this.click();\n    }\n  }\n\n  protected _handleInvalid(e: Event) {\n    e.preventDefault();\n    this.invalid = true;\n  }\n  /** @internal For Id/For pair of the HTML form control and label. */\n  protected _inputId: string;\n\n  /**@internal */\n  @property({ type: String }) protected _size: string;\n  /** @internal */\n  @watch(\"disabled\", { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.input.disabled = this.disabled;\n    this.invalid = !this.input.checkValidity();\n  }\n  /** @internal */\n  @watch(\"checked\", { waitUntilFirstUpdate: true })\n  handleStateChange() {\n    this.invalid = !this.input.checkValidity();\n  }\n  render() {\n    return html`\n      <div\n        class=${classMap({\n          \"form-check\": true,\n          \"form-check-inline\": this.isInline\n        })}\n      >\n        <input\n          class=${classMap({\n            \"form-check-input\": true,\n            \"is-invalid\": this.hasFeedback && this.invalid,\n            md: this._size === \"md\"\n          })}\n          type=\"checkbox\"\n          id=${this._inputId}\n          aria-invalid=${this.invalid ? \"true\" : \"false\"}\n          name=${ifDefined(this.name)}\n          value=${ifDefined(this.value)}\n          ?checked=${this.checked}\n          ?disabled=${this.disabled}\n          ?required=${this.required}\n          aria-disabled=${this.disabled ? \"true\" : \"false\"}\n          aria-checked=${this.checked ? \"true\" : \"false\"}\n          @change=${this._handleChange}\n          @keydown=${this._handleKeyDown}\n          @invalid=${(e: Event) => this._handleInvalid(e)}\n        />\n        <label for=\"${this._inputId}\" aria-label=${ifDefined(this.ariaLabel)} class=\"form-check-label\"\n          ><slot></slot\n        ></label>\n        ${this.hasFeedback\n          ? html`<div id=\"${this._inputId}-invalid\" class=\"invalid-feedback\">${this.invalidFeedback}</div>`\n          : nothing}\n      </div>\n    `;\n  }\n}\n\nexport default FormCheckElement;\n"]}