{"version":3,"file":"defaultvalue.js","sourceRoot":"","sources":["defaultvalue.ts"],"names":[],"mappings":"AAAA,0BAA0B;AAC1B,EAAE;AACF,oIAAoI;AACpI,yBAAyB;AACzB,EAAE;AACF,uHAAuH;AACvH,0BAA0B;AAC1B,EAAE;AACF,EAAE;AACF,SAAS;AACT,EAAE;AACF,+CAA+C;AAC/C,oBAAoB;AACpB,EAAE;AACF,4BAA4B;AAC5B,2BAA2B;AAC3B,EAAE;AAEF,OAAO,EAAE,gBAAgB,EAAE,MAAM,KAAK,CAAC;AAGvC,MAAM,CAAC,MAAM,YAAY,GACvB,CAAC,YAAY,GAAG,OAAO,EAAE,EAAE,CAC3B,CAAC,KAAsB,EAAE,GAAW,EAAE,EAAE;IACtC,MAAM,IAAI,GAAG,KAAK,CAAC,WAAqC,CAAC;IAEzD,MAAM,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC;IACzE,IAAI,CAAC,SAAS,CAAC,wBAAwB,GAAG,UAExC,IAAI,EACJ,GAAG,EACH,KAAK;;QAEL,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACtD,MAAM,aAAa,GAAG,CAAC,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/G,IAAI,IAAI,KAAK,aAAa,EAAE,CAAC;YAC3B,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,gBAAgB,CAAC;YACxD,MAAM,aAAa,GACjB,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,aAAa,mCAAI,gBAAgB,CAAC,aAAa,CAAC;YAE3G,MAAM,QAAQ,GAAY,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,QAAQ,EAAE,CAAC;gBACpC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;YACvB,CAAC;QACH,CAAC;QACD,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// @defaultValue decorator\n//\n// Runs when the corresponding attribute of the observed property changes, e.g. after calling Element.setAttribute or after updating\n// the observed property.\n//\n// The decorator checks whether the value of the attribute is different from the value of the property and in that case\n// it saves the new value.\n//\n//\n// Usage:\n//\n//  @property({ type: Boolean, reflect: true })\n//  checked = false;\n//\n//  @defaultValue('checked')\n//  defaultChecked = false;\n//\n\nimport { defaultConverter } from \"lit\";\nimport type { ReactiveElement } from \"lit\";\n\nexport const defaultValue =\n  (propertyName = \"value\") =>\n  (proto: ReactiveElement, key: string) => {\n    const ctor = proto.constructor as typeof ReactiveElement;\n\n    const attributeChangedCallback = ctor.prototype.attributeChangedCallback;\n    ctor.prototype.attributeChangedCallback = function (\n      this: ReactiveElement & { [name: string]: unknown },\n      name,\n      old,\n      value\n    ) {\n      const options = ctor.getPropertyOptions(propertyName);\n      const attributeName = (typeof options.attribute === \"string\" ? options.attribute : propertyName).toLowerCase();\n      if (name === attributeName) {\n        const converter = options.converter || defaultConverter;\n        const fromAttribute =\n          typeof converter === \"function\" ? converter : converter?.fromAttribute ?? defaultConverter.fromAttribute;\n\n        const newValue: unknown = fromAttribute(value, options.type);\n        if (this[propertyName] !== newValue) {\n          this[key] = newValue;\n        }\n      }\n      attributeChangedCallback.call(this, name, old, value);\n    };\n  };\n"]}