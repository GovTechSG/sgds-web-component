{"version":3,"file":"sgds-input.js","sourceRoot":"","sources":["sgds-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { live } from \"lit/directives/live.js\";\nimport { unsafeSVG } from \"lit/directives/unsafe-svg.js\";\nimport { html } from \"lit/static-html.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport { defaultValue } from \"../../utils/defaultvalue\";\nimport type { SgdsFormControl } from \"../../utils/form\";\nimport { FormSubmitController } from \"../../utils/form\";\nimport genId from \"../../utils/generateId\";\nimport { watch } from \"../../utils/watch\";\nimport inputStyle from \"./input.css\";\nimport feedbackStyles from \"../../styles/feedback.css\";\nimport formHintStyles from \"../../styles/form-hint.css\";\nimport formLabelStyles from \"../../styles/form-label.css\";\n/**\n * @summary Text inputs allow your users to enter letters, numbers and symbols on a single line.\n *\n * @event sgds-change - Emitted when an alteration to the control's value is committed by the user.\n * @event sgds-input - Emitted when the control receives input and its value changes.\n * @event sgds-focus - Emitted when input is in focus.\n * @event sgds-blur - Emitted when input is not in focus.\n *\n * @cssproperty --sgds-input-padding-x - The x-axis padding of the input\n * @cssproperty --sgds-input-padding-y - The y-axis padding of the input\n * @cssproperty --sgds-input-line-height - The line height of text in the input\n * @cssproperty --sgds-input-font-weight - Sets the font weight of text in the input\n * @cssproperty --sgds-input-font-size - Sets the font size of text in the input\n * @cssproperty --sgds-input-border-radius - The border radius of the input\n * @cssproperty --sgds-input-border-width - The thickness of the input's border\n * @cssproperty --sgds-input-border-color - The border color of the input\n * @cssproperty --sgds-input-focus-box-shadow-color - The color of box shadow of input at focused state\n * @cssproperty --sgds-input-focus-box-shadow - The box shadow of input at focused state\n * @cssproperty --sgds-input-color - Sets the text colors of input\n * @cssproperty --sgds-input-placeholder-color - Sets the text color input's placeholder. \n * @cssproperty --sgds-form-label-color - Sets the text color of input's label\n * @cssproperty --sgds-form-label-font-weight - Sets the font weight of input's label\n * @cssproperty --sgds-form-hint-text-color - The color of hint text\n * @cssproperty --sgds-form-hint-text-font-size - The font size of hint text\n * @cssproperty --sgds-form-hint-text-font-weight - The font weight of hint text\n\n *\n */\nexport class SgdsInput extends SgdsElement implements SgdsFormControl {\n  static styles = [...SgdsElement.styles, feedbackStyles, formHintStyles, formLabelStyles, inputStyle];\n  /**@internal */\n  @query(\"input.form-control\") input: HTMLInputElement;\n  /**@internal */\n  protected readonly formSubmitController = new FormSubmitController(this);\n  /** The type of input which works the same as HTMLInputElement */\n  @property({ reflect: true }) type: \"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" =\n    \"text\";\n  /** The input's label  */\n  @property({ reflect: true }) label = \"\";\n  /** The input's hint text below the label */\n  @property({ reflect: true }) hintText = \"\";\n  /**The input's name attribute */\n  @property({ reflect: true }) name: string;\n  /**Optional. Pass svg html of icons in string form*/\n  @property({ type: String }) icon: string;\n  /**Sets the minimum length of the input */\n  @property({ type: Number, reflect: true }) minlength: number;\n  /**Sets the maximum length of the input */\n  @property({ type: Number, reflect: true }) maxlength: number;\n  /**The input's placeholder text. */\n  @property({ type: String, reflect: true }) placeholder = \"placeholder\";\n  /**A pattern to validate input against. */\n  @property({ type: String }) pattern: string;\n  /**Autofocus the input */\n  @property({ type: Boolean, reflect: true }) autofocus = false;\n  /**Disables the input. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n  /**Makes the input a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n  /**Makes the input readonly. */\n  @property({ type: Boolean, reflect: true }) readonly = false;\n  /** The input's minimum value. Only applies number input types. */\n  @property() min: number | string;\n\n  /** The input's maximum value. Only applies number input types. */\n  @property() max: number | string;\n\n  /**\n   * Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\n   * implied, allowing any numeric value. Only applies to number input types.\n   */\n  @property() step: number | \"any\";\n\n  /**The input's value attribute. */\n  @property({ reflect: true }) value = \"\";\n  /**Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */\n  @defaultValue()\n  defaultValue = \"\";\n\n  /** Allows invalidFeedback, invalid and valid styles to be visible with the input */\n  @property({ type: Boolean, reflect: true }) hasFeedback = false;\n  /**Feedback text for error state when validated */\n  @property({ type: String, reflect: true }) invalidFeedback = \"\";\n\n  /** Marks the component as invalid. Replace the pseudo :invalid selector for absent in custom elements */\n  @property({ type: Boolean, reflect: true }) invalid = false;\n  /** Marks the input as invalid. Replace the pseudo :valid selector for absent in custom elements */\n  @property({ type: Boolean, reflect: true }) valid = false;\n\n  /**@internal */\n  protected inputId: string = genId(\"input\", this.type);\n\n  protected labelId: string = genId(\"label\");\n\n  /** Sets focus on the input. */\n  public focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n  /** Sets blur on the input. */\n  public blur() {\n    this.input.blur();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  public reportValidity() {\n    return this.input.reportValidity();\n  }\n  public setCustomValidity(err: string) {\n    return this.input.setCustomValidity(err);\n  }\n  public setInvalid(bool: boolean) {\n    this.invalid = bool;\n  }\n  protected _handleChange(event: string) {\n    this.value = this.input.value;\n    this.emit(event);\n  }\n\n  protected _handleFocus() {\n    this.emit(\"sgds-focus\");\n  }\n\n  protected _handleBlur() {\n    this.emit(\"sgds-blur\");\n  }\n\n  protected _handleKeyDown(event: KeyboardEvent) {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n\n    // Pressing enter when focused on an input should submit the form like a native input, but we wait a tick before\n    // submitting to allow users to cancel the keydown event if they need to\n    if (event.key === \"Enter\" && !hasModifier) {\n      setTimeout(() => {\n        // Prevent submission when enter is click on a submission in an Input Method Editor with isComposing\n        if (!event.defaultPrevented && !event.isComposing) {\n          this.formSubmitController.submit();\n        }\n      });\n    }\n  }\n\n  @watch(\"disabled\", { waitUntilFirstUpdate: true })\n  _handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.input.disabled = this.disabled;\n    this.invalid = !this.input.checkValidity();\n  }\n\n  @watch(\"value\", { waitUntilFirstUpdate: true })\n  _handleValueChange() {\n    this.invalid = !this.input.checkValidity();\n    this.valid = this.input.checkValidity();\n    // remove validation for input that is not required, is already dirty and has empty value\n    if (!this.required && this.value === \"\") {\n      this.valid = false;\n    }\n  }\n  protected _renderInput() {\n    return html`<input\n        class=${classMap({\n          \"form-control\": true,\n          \"is-invalid\": this.hasFeedback && this.invalid,\n          \"is-valid\": this.hasFeedback && this.valid\n        })}\n        type=${this.type}\n        id=${this.inputId}\n        name=${ifDefined(this.name)}\n        placeholder=${ifDefined(this.placeholder)}\n        aria-invalid=${this.invalid ? \"true\" : \"false\"}\n        pattern=${ifDefined(this.pattern)}\n        ?autofocus=${this.autofocus}\n        ?disabled=${this.disabled}\n        ?readonly=${this.readonly}\n        ?required=${this.required}\n        .value=${live(this.value)}\n        minlength=${ifDefined(this.minlength)}\n        maxlength=${ifDefined(this.maxlength)}\n        min=${ifDefined(this.min)}\n        max=${ifDefined(this.max)}\n        step=${ifDefined(this.step as number)}\n        @input=${() => this._handleChange(\"sgds-input\")}\n        @change=${() => this._handleChange(\"sgds-change\")}\n        @keydown=${this._handleKeyDown}\n        @invalid=${() => this.setInvalid(true)}\n        @focus=${this._handleFocus}\n        @blur=${this._handleBlur}\n        aria-describedby=${ifDefined(this.invalid && this.hasFeedback ? `${this.inputId}-invalid` : undefined)}\n        aria-labelledby=\"${this.labelId} ${this.inputId}Help ${this.invalid && this.hasFeedback\n          ? `${this.inputId}-invalid`\n          : \"\"}\"\n      />\n      ${this._renderFeedback()} `;\n  }\n  protected _renderFeedback() {\n    return this.hasFeedback\n      ? html`<div id=\"${this.inputId}-invalid\" class=\"invalid-feedback\">${this.invalidFeedback}</div>`\n      : \"\";\n  }\n  protected _renderLabel() {\n    const labelTemplate = html`\n      <label\n        for=${this.inputId}\n        id=${this.labelId}\n        class=${classMap({\n          \"form-label\": true,\n          required: this.required\n        })}\n        >${this.label}</label\n      >\n    `;\n    return this.label && labelTemplate;\n  }\n  protected _renderHintText() {\n    const hintTextTemplate = html` <small id=\"${this.inputId}Help\" class=\"form-text\">${this.hintText}</small> `;\n    return this.hintText && hintTextTemplate;\n  }\n  render() {\n    const input = html`${this._renderInput()}`;\n    // if iconName is defined\n    const inputWithIcon = html`\n      <div class=\"sgds form-control-group\">\n        <span class=\"form-control-icon\"> ${unsafeSVG(this.icon)} </span>\n        ${input}\n      </div>\n    `;\n    // if hintText is defined\n\n    return html`\n      <div class=\"form-control-container\">\n        ${html`${this._renderLabel()} ${this._renderHintText()} ${this.icon ? inputWithIcon : input} `}\n      </div>\n    `;\n  }\n}\n\nexport default SgdsInput;\n"]}