{"version":3,"file":"sgds-action-card.js","sourceRoot":"","sources":["sgds-action-card.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAC9E,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAO,SAAS,EAAE,GAAG,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,KAAK,MAAM,wBAAwB,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,gBAAgB,MAAM,mBAAmB,CAAC;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,OAAO,cAAe,SAAQ,mBAAmB,CAAC,WAAW,CAAC;IAApE;;QASE,gBAAgB;QAChB,aAAQ,GAAkC,SAAS,EAAE,CAAC;QAKtD,iEAAiE;QACrB,aAAQ,GAAG,KAAK,CAAC;QAC7D,0CAA0C;QACE,YAAO,GAAG,KAAK,CAAC;QAE5D,2CAA2C;QACA,SAAI,GAAgB,UAAU,CAAC;QAE1E,qDAAqD;QAErD,WAAM,GAAG,KAAK,CAAC;QAWf,gCAAgC;QACxB,YAAO,GAAW,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAwE1D,CAAC;IA3GC,eAAe;IACf,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,eAAe,EAAE,YAAY;YAC7B,YAAY,EAAE,SAAS;SACxB,CAAC;IACJ,CAAC;IAmBD,4CAA4C;IACrC,KAAK;QACV,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IACD,gDAAgD;IAChD,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;IAID,gBAAgB;IAEV,AAAN,KAAK,CAAC,wBAAwB;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;IAC7B,CAAC;IACD,gBAAgB;IAEV,AAAN,KAAK,CAAC,oBAAoB;QACxB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAEO,cAAc,CAAC,KAAoB;QACzC,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC;QACrF,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1C,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,CAAA;QACjB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;kBACR,IAAI,CAAC,QAAQ;WACpB,IAAI,CAAC,OAAO;eACR,IAAI,CAAC,iBAAiB;iBACpB,IAAI,CAAC,cAAc;eACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;iBACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;qBACd,CAAC,CAAc,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;sBACpD,CAAC;QAEnB,MAAM,KAAK,GAAG,IAAI,CAAA;QACd,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;kBACR,IAAI,CAAC,QAAQ;WACpB,IAAI,CAAC,OAAO;eACR,IAAI,CAAC,iBAAiB;iBACpB,IAAI,CAAC,cAAc;eACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;iBACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;mBAChB,CAAC;QAEhB,OAAO,IAAI,CAAA;;mBAEI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;iBAC5B,IAAI,CAAC,iBAAiB;mBACpB,IAAI,CAAC,cAAc;;;UAG5B,QAAQ,CAAC;YACT,CAAC,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS;YAC1C,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO;YACpC,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW;YAChD,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM;SAC3B,CAAC;;;;;;;;;;sCAU4B,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;;;;;;KAM5E,CAAC;IACJ,CAAC;;AA3GM,qBAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,gBAAgB,CAAC,AAA5C,CAA6C;AAW7B;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CAAc;AAEd;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CAAe;AAEE;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAAkB;AAEjB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CAAiB;AAGjB;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CAAgC;AAI1E;IADC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;8CAC5B;AAgBT;IADL,KAAK,CAAC,SAAS,CAAC;8DAGhB;AAGK;IADL,KAAK,CAAC,UAAU,CAAC;0DAGjB;AAiEH,eAAe,cAAc,CAAC","sourcesContent":["import { ScopedElementsMixin } from \"@open-wc/scoped-elements/lit-element.js\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { live } from \"lit/directives/live.js\";\nimport { Ref, createRef, ref } from \"lit/directives/ref.js\";\nimport { html } from \"lit/static-html.js\";\nimport { CardElement } from \"../../base/card-element\";\nimport genId from \"../../utils/generateId\";\nimport { watch } from \"../../utils/watch\";\nimport { SgdsCheckbox } from \"../Checkbox/sgds-checkbox\";\nimport { SgdsRadio } from \"../Radio/sgds-radio\";\nimport actionCardStyles from \"./action-card.css\";\n\n/**\n * @summary Action Card are cards with built in checkbox or radio components. The ref of input is extended to the Card's body.\n * @slot icon - Icon content in the card-subtitile\n * @slot card-subtitle - The subtitle of the card\n * @slot card-title - The title of the card\n * @slot card-text - The paragrapher text of the card\n *\n * @event sgds-change - Emitted when the checked state of card's checkbox changes or when the selected card's radio has changed\n *\n * @csspart base - The action card base wrapper\n * @csspart body - The action card body\n * @csspart subtitle - The action card subtitle\n * @csspart title - The action card title\n * @csspart text - The action card text\n *\n * @cssprop --sgds-action-card-transition-duration - The transition duration to active or hover state. Defaults to 0.3s\n * @cssprop --sgds-action-card-body-gap - The vertical gap between items in card body\n * @cssprop --sgds-card-bg - The background color of the card\n * @cssprop --sgds-card-height - The height of the card. By default, height of card depends on the size of its children\n * @cssprop --sgds-card-border-width - The border width of card\n * @cssprop --sgds-card-border-color - The border color of card\n * @cssprop --sgds-card-border-radius - The border radius of card\n * @cssprop --sgds-card-box-shadow - The box-shadow of card\n * @cssprop --sgds-card-inner-border-radius - The inner border radius of card. Useful in cases where card image is applied to prevent image border from exceeding the outer borders of the card\n * @cssprop --sgds-card-body-color - The text color of the items in card body. This includes title, subtitle and excludes link.\n * @cssprop --sgds-card-body-padding - The padding of the card body\n * @cssprop --sgds-card-title-color - The text color of card title\n * @cssprop --sgds-card-title-margin-bottom - The margin-bottom of card title\n * @cssprop --sgds-card-subtitle-color - The text color of card subtitle\n */\nexport class SgdsActionCard extends ScopedElementsMixin(CardElement) {\n  static styles = [...CardElement.styles, actionCardStyles];\n  /**@internal */\n  static get scopedElements() {\n    return {\n      \"sgds-checkbox\": SgdsCheckbox,\n      \"sgds-radio\": SgdsRadio\n    };\n  }\n  /** @internal */\n  inputRef: Ref<SgdsCheckbox | SgdsRadio> = createRef();\n  /** Name of the HTML form control. Submitted with the form as part of a name/value pair. */\n  @property({ reflect: true }) name: string;\n  /** Value of the HTML form control. Primarily used to differentiate a list of related checkboxes that have the same name. */\n  @property({ type: String }) value: string;\n  /** Disables the input (so the user can't check / uncheck it). */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n  /** Draws the input in a checked state. */\n  @property({ type: Boolean, reflect: true }) checked = false;\n\n  /** The type of input of the action card */\n  @property({ type: String, reflect: true }) type: TypeVariant = \"checkbox\";\n\n  /** Controls the active styling of the action card */\n  @property({ reflect: true, type: Boolean })\n  active = false;\n\n  /** Simulates a click on the input control*/\n  public click() {\n    this.inputRef.value.click();\n  }\n  /** @internal Declare the click event listener*/\n  async handleInputChange() {\n    this.inputRef.value.click();\n    this.emit(\"sgds-change\");\n  }\n  /** @internal The input's id. */\n  private inputId: string = genId(\"action-card\", \"input\");\n\n  /** @internal */\n  @watch(\"checked\")\n  async handleRadioCheckedChange() {\n    this.active = this.checked;\n  }\n  /** @internal */\n  @watch(\"disabled\")\n  async handleDisabledChange() {\n    this.active = !this.disabled;\n  }\n\n  private _handleKeyDown(event: KeyboardEvent) {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n    if (event.key === \"Enter\" && !hasModifier) {\n      this.handleInputChange();\n    }\n  }\n\n  render() {\n    const checkbox = html`<sgds-checkbox\n      ${ref(this.inputRef)}\n      ?disabled=${this.disabled}\n      id=${this.inputId}\n      @click=${this.handleInputChange}\n      @keydown=${this._handleKeyDown}\n      .value=${live(this.value)}\n      ?checked=${live(this.checked)}\n      @sgds-change=${(e: CustomEvent) => (this.checked = e.detail.checked)}\n    ></sgds-checkbox>`;\n\n    const radio = html`<sgds-radio\n      ${ref(this.inputRef)}\n      ?disabled=${this.disabled}\n      id=${this.inputId}\n      @click=${this.handleInputChange}\n      @keydown=${this._handleKeyDown}\n      .value=${live(this.value)}\n      ?checked=${live(this.checked)}\n    ></sgds-radio>`;\n\n    return html`\n      <div\n        tabindex=${this.disabled ? \"-1\" : \"0\"}\n        @click=${this.handleInputChange}\n        @keydown=${this._handleKeyDown}\n        variant=\"card-action\"\n        class=\"sgds card\n        ${classMap({\n          [`text-${this.textColor}`]: this.textColor,\n          [`bg-${this.bgColor}`]: this.bgColor,\n          [`border-${this.borderColor}`]: this.borderColor,\n          [\"is-active\"]: this.active\n        })}\n        \"\n        part=\"base\"\n      >\n        <div class=\"card-body\" part=\"body\">\n          <h6 class=\"card-subtitle\" part=\"subtitle\">\n            <div>\n              <slot name=\"icon\"></slot>\n              <slot name=\"card-subtitle\"></slot>\n            </div>\n            <div class=\"card-input\">${this.type === \"checkbox\" ? checkbox : radio}</div>\n          </h6>\n          <h5 class=\"card-title\" part=\"title\"><slot name=\"card-title\"></slot></h5>\n          <p class=\"card-text\" part=\"text\"><slot name=\"card-text\"></slot></p>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport type TypeVariant = \"checkbox\" | \"radio\";\n\nexport default SgdsActionCard;\n"]}