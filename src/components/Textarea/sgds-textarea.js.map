{"version":3,"file":"sgds-textarea.js","sourceRoot":"","sources":["sgds-textarea.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { live } from \"lit/directives/live.js\";\nimport { html } from \"lit/static-html.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport { defaultValue } from \"../../utils/defaultvalue\";\nimport { FormSubmitController, SgdsFormControl } from \"../../utils/form\";\nimport genId from \"../../utils/generateId\";\nimport { watch } from \"../../utils/watch\";\nimport textareaStyle from \"./textarea.css\";\nimport feedbackStyles from \"../../styles/feedback.css\";\nimport formLabelStyles from \"../../styles/form-label.css\";\nimport formHintStyles from \"../../styles/form-hint.css\";\n\n/**\n * @summary Text areas allow for the collection of input longer than a single line.\n *\n * @event sgds-change - Emitted when an alteration to the control's value is committed by the user.\n * @event sgds-input - Emitted when the control receives input and its value changes.\n * @event sgds-focus - Emitted when textarea is in focus.\n * @event sgds-blur - Emitted when textarea loses focus.\n *\n * @cssproperty --sgds-textarea-padding-x - The x-axis padding of the textarea\n * @cssproperty --sgds-textarea-padding-y - The y-axis padding of the textarea\n * @cssproperty --sgds-textarea-line-height - The line height of text in the textarea\n * @cssproperty --sgds-textarea-font-weight - Sets the font weight of text in the textarea\n * @cssproperty --sgds-textarea-font-size - Sets the font size of text in the textarea\n * @cssproperty --sgds-textarea-border-radius - The border radius of the textarea\n * @cssproperty --sgds-textarea-border-width - The thickness of the textarea's border\n * @cssproperty --sgds-textarea-border-color - The border color of the textarea\n * @cssproperty --sgds-textarea-focus-box-shadow-color - The color of box shadow of textarea at focused state\n * @cssproperty --sgds-textarea-focus-box-shadow - The box shadow of textarea at focused state\n * @cssproperty --sgds-textarea-placeholder-color - Sets the text color textarea's placeholder.\n * @cssproperty --sgds-textarea-color - Sets the text colors of textarea\n * @cssproperty --sgds-form-label-color - Sets the text color of textarea's label\n * @cssproperty --sgds-form-label-font-weight - Sets the font weight of textarea's label\n * @cssproperty --sgds-form-hint-text-color - The color of hint text\n * @cssproperty --sgds-form-hint-text-font-size - The font size of hint text\n * @cssproperty --sgds-form-hint-text-font-weight - The font weight of hint text\n */\nexport class SgdsTextarea extends SgdsElement implements SgdsFormControl {\n  static styles = [...SgdsElement.styles, feedbackStyles, formHintStyles, formLabelStyles, textareaStyle];\n  /**@internal */\n  @query(\"textarea.form-control\") textarea: HTMLTextAreaElement;\n  /**@internal */\n  private readonly formSubmitController = new FormSubmitController(this);\n  /**@internal */\n  private resizeObserver: ResizeObserver;\n  /**The textarea's label */\n  @property({ type: String, reflect: true }) label = \"label\";\n  /**The textarea's name attribute */\n  @property({ type: String, reflect: true }) name: string;\n  /**The textarea's value attribute. */\n  @property({ type: String, reflect: true }) value = \"\";\n  /**Sets the minimum length of the textarea */\n  @property({ type: Number, reflect: true }) minlength: number;\n  /**Sets the maximum length of the textarea */\n  @property({ type: Number, reflect: true }) maxlength: number;\n  /**Enables spell checking on the textarea */\n  @property({ type: Boolean, reflect: true }) spellcheck = false;\n  /** The number of rows to display by default. */\n  @property({ type: Number }) rows = 4;\n  /**The textarea's placeholder text. */\n  @property({ type: String, reflect: true }) placeholder = \"Placeholder\";\n  /**Feedback text for error state when validated */\n  @property({ type: String, reflect: true }) invalidFeedback = \"\";\n  /**Autofocus the textarea */\n  @property({ type: Boolean, reflect: true }) autofocus = false;\n  /**Disables the textarea. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n  /**Makes the textarea a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n  /** Makes the textarea readonly. */\n  @property({ type: Boolean, reflect: true }) readonly = false;\n\n  /** Controls how the textarea can be resized. */\n  @property({ type: String, reflect: true }) resize: \"none\" | \"vertical\" | \"auto\" = \"vertical\";\n  /** The native textarea's inputmode attribute. It hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard. */\n  @property({ type: String, reflect: true }) inputmode:\n    | \"none\"\n    | \"text\"\n    | \"decimal\"\n    | \"numeric\"\n    | \"tel\"\n    | \"search\"\n    | \"email\"\n    | \"url\";\n  /** The native textarea's autocorrect attribute. */\n  @property({ type: String, reflect: true }) autocorrect: string;\n  /** Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */\n  @defaultValue()\n  defaultValue = \"\";\n  /** Allows invalidFeedback, invalid and valid styles to be visible with the input */\n  @property({ type: Boolean, reflect: true }) hasFeedback = false;\n\n  /** Marks the component as invalid. Replace the pseudo :invalid selector for absent in custom elements */\n  @property({ type: Boolean, reflect: true }) invalid = false;\n  /** Marks the input as invalid. Replace the pseudo :valid selector for absent in custom elements */\n  @property({ type: Boolean, reflect: true }) valid = false;\n\n  /** @internal The textarea's unique id */\n  private textareaId = genId(\"textarea\", \"input\");\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.resizeObserver = new ResizeObserver(() => this.setTextareaHeight());\n\n    this.updateComplete.then(() => {\n      this.setTextareaHeight();\n      this.resizeObserver.observe(this.textarea);\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.resizeObserver.unobserve(this.textarea);\n  }\n\n  /** Sets focus on the textarea. */\n  public focus(options?: FocusOptions) {\n    this.textarea.focus(options);\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  public reportValidity() {\n    return this.textarea.reportValidity();\n  }\n  /** Selects all the text in the textarea. */\n  public select() {\n    this.textarea.select();\n  }\n  handleInvalid(e: Event) {\n    e.preventDefault();\n    this.invalid = true;\n  }\n\n  handleChange(event: string) {\n    this.value = this.textarea.value;\n    this.emit(event);\n  }\n\n  handleFocus() {\n    this.emit(\"sgds-focus\");\n  }\n\n  handleBlur() {\n    this.emit(\"sgds-blur\");\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n\n    // Pressing enter when focused on an input should submit the form like a native input, but we wait a tick before\n    // submitting to allow users to cancel the keydown event if they need to\n    if (event.key === \"Enter\" && !hasModifier) {\n      setTimeout(() => {\n        if (!event.defaultPrevented) {\n          this.formSubmitController.submit();\n        }\n      });\n    }\n  }\n\n  @watch(\"rows\", { waitUntilFirstUpdate: true })\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n\n  setTextareaHeight() {\n    if (this.resize === \"auto\") {\n      this.textarea.style.height = \"auto\";\n      this.textarea.style.height = `${this.textarea.scrollHeight}px`;\n    } else {\n      (this.textarea.style.height as string | undefined) = undefined;\n    }\n  }\n\n  @watch(\"disabled\", { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.textarea.disabled = this.disabled;\n    this.invalid = !this.textarea.checkValidity();\n  }\n\n  @watch(\"value\", { waitUntilFirstUpdate: true })\n  handleValueChange() {\n    this.invalid = !this.textarea.checkValidity();\n    this.valid = this.textarea.checkValidity();\n    this.updateComplete.then(() => this.setTextareaHeight());\n    if (!this.required && this.value === \"\") {\n      this.valid = false;\n    }\n  }\n\n  render() {\n    // if maxlength is defined\n    const wordCount = html` <div class=\"form-text\">${this.value.length}/${this.maxlength}</div> `;\n\n    return html`\n      <div class=\"text-area-label-wrapper\">\n        <label for=${this.textareaId} class=\"form-label\">${this.label}</label>\n        ${this.maxlength > 0 ? wordCount : undefined}\n      </div>\n\n      <textarea\n        class=${classMap({\n          \"form-control\": true,\n          \"is-invalid\": this.hasFeedback && this.invalid,\n          \"is-valid\": this.hasFeedback && this.valid,\n          \"textarea-resize-none\": this.resize === \"none\",\n          \"textarea-resize-vertical\": this.resize === \"vertical\",\n          \"textarea-resize-auto\": this.resize === \"auto\"\n        })}\n        id=${this.textareaId}\n        name=${ifDefined(this.name)}\n        rows=${ifDefined(this.rows)}\n        placeholder=${ifDefined(this.placeholder)}\n        minlength=${ifDefined(this.minlength)}\n        maxlength=${ifDefined(this.maxlength)}\n        .value=${live(this.value)}\n        aria-invalid=${this.invalid ? \"true\" : \"false\"}\n        spellcheck=${ifDefined(this.spellcheck)}\n        ?disabled=${this.disabled}\n        ?readonly=${this.readonly}\n        ?required=${this.required}\n        ?autofocus=${this.autofocus}\n        autocorrect=${ifDefined(this.autocorrect)}\n        inputmode=${ifDefined(this.inputmode)}\n        @keyup=${this.handleValueChange}\n        @input=${() => this.handleChange(\"sgds-input\")}\n        @change=${() => this.handleChange(\"sgds-change\")}\n        @invalid=${(e: Event) => this.handleInvalid(e)}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n      >\n      </textarea>\n\n      ${this.hasFeedback\n        ? html`<div id=\"${this.textareaId}-invalid\" class=\"invalid-feedback\">${this.invalidFeedback}</div>`\n        : \"\"}\n    `;\n  }\n}\n\nexport default SgdsTextarea;\n"]}