{"version":3,"file":"sgds-progress-bar.js","sourceRoot":"","sources":["sgds-progress-bar.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD;;;;;GAKG;AAEH,MAAM,OAAO,eAAgB,SAAQ,WAAW;IAAhD;;QAsBE;;WAEG;QACwC,cAAS,GAAG,EAAE,CAAC;QAE1D,2CAA2C;QACC,YAAO,GAAG,KAAK,CAAC;QAC5D;;;;WAIG;QACyC,aAAQ,GAAG,KAAK,CAAC;QAE7D,uCAAuC;QACI,UAAK,GAAG,EAAE,CAAC;IAqBxD,CAAC;IAnBC,MAAM;QACJ,OAAO,IAAI,CAAA;;gBAEC,QAAQ,CAAC;YACf,cAAc,EAAE,IAAI;YACpB,sBAAsB,EAAE,IAAI,CAAC,OAAO;YACpC,uBAAuB,EAAE,IAAI,CAAC,QAAQ;SACvC,CAAC;;gBAEM,QAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;qBAChC,IAAI,CAAC,SAAS;wBACX,IAAI,CAAC,KAAK;wBACV,IAAI,CAAC,OAAO;wBACZ,IAAI,CAAC,OAAO;;UAE1B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS;;KAEjD,CAAC;IACJ,CAAC;;AAxDM,sBAAM,GAAG,CAAC,gBAAgB,CAAC,AAArB,CAAsB;AAGQ;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAA6B;AAI5B;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAAe;AAOd;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAAiB;AAMhB;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAAiB;AAIhB;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;kDAAgB;AAGd;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gDAAiB;AAMhB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iDAAkB;AAGlB;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAAY;AAuBxD,eAAe,eAAe,CAAC","sourcesContent":["import { property } from \"lit/decorators.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport { html } from \"lit\";\nimport progressBarStyle from \"./progress-bar.css\";\nexport type ProgressBarVariant = \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"dark\";\n/**\n * @cssproperty --sgds-progress-bar-color - Sets the text color on the progress bar\n * @cssproperty --sgds-progress-bar-font-size - Sets the font size of the text on the progress bar\n * @cssproperty --sgds-progress-bar-bg - Sets the fill color of the progress bar\n * @cssproperty --sgds-progress-bar-transition - Sets the transition of the progress bar\n */\n\nexport class SgdsProgressBar extends SgdsElement {\n  static styles = [progressBarStyle];\n\n  /** The background color of the progress bar */\n  @property({ type: String, reflect: true }) variant: ProgressBarVariant;\n  /**\n   * The current progress as a percentage, from 0 to 100.\n   */\n  @property({ type: Number, reflect: true }) value: number;\n\n  /**\n   * Sets the minimun aria range for assistive devices.\n   *\n   * The aria-valuemin attribute defines the minimun allowed value for a range widget.\n   */\n  @property({ type: Number, reflect: true }) ariamin: number;\n  /**\n   * Sets the maximum aria range for assistive devices.\n   *\n   * The aria-valuemax attribute defines the maximum allowed value for a range widget.\n   */\n  @property({ type: Number, reflect: true }) ariamax: number;\n  /**\n   * Sets the aria label for assistive devices.\n   */\n  @property({ type: String, reflect: true }) arialabel = \"\";\n\n  /** Apply a stripe over the progress bar */\n  @property({ type: Boolean, reflect: true }) striped = false;\n  /**\n   * Animated stripes over the progress bar.\n   *\n   * Use in conjunction with striped property\n   */\n  @property({ type: Boolean, reflect: true }) animated = false;\n\n  /** Add label on top of progress bar */\n  @property({ type: String, reflect: true }) label = \"\";\n\n  render() {\n    return html`\n      <div\n        class=${classMap({\n          \"progress-bar\": true,\n          \"progress-bar-striped\": this.striped,\n          \"progress-bar-animated\": this.animated\n        })}\n        role=\"progressbar\"\n        style=${styleMap({ width: `${this.value}%` })}\n        aria-label=${this.arialabel}\n        aria-valuenow=${this.value}\n        aria-valuemin=${this.ariamin}\n        aria-valuemax=${this.ariamax}\n      >\n        ${this.label ? html`${this.label}` : undefined}\n      </div>\n    `;\n  }\n}\n\nexport default SgdsProgressBar;\n"]}