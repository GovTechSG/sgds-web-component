{"version":3,"file":"sgds-badge.js","sourceRoot":"","sources":["sgds-badge.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAClD,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,eAAe,MAAM,kCAAkC,CAAC;AAG/D;;;;;;;;;;;;;;;GAeG;AACH,MAAM,OAAO,SAAU,SAAQ,WAAW;IAA1C;;QAUE,4CAA4C;QACA,SAAI,GAAG,IAAI,CAAC;QAExD,uKAAuK;QAC1I,YAAO,GAAiB,MAAM,CAAC;QAE5D,+CAA+C;QACH,aAAQ,GAAG,KAAK,CAAC;QAE7D,kEAAkE;QACtB,gBAAW,GAAG,KAAK,CAAC;IA4ClE,CAAC;IA7DC,eAAe;IACf,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,mBAAmB,EAAE,eAAe;SACrC,CAAC;IACJ,CAAC;IAcD,wBAAwB;IACjB,KAAK;QACV,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IACD,eAAe;IAEf,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI;YACd,CAAC,CAAC,IAAI,CAAA;;;YAGA,QAAQ,CAAC;gBACP,IAAI,EAAE,IAAI;gBACV,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,WAAW;gBACvC,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;;0BAEY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;;;;;;;;cAQxC,IAAI,CAAC,WAAW;gBAChB,CAAC,CAAC,IAAI,CAAA;;;2BAGO,IAAI,CAAC,KAAK;sCACC;gBACxB,CAAC,CAAC,OAAO;;SAEd;YACH,CAAC,CAAC,OAAO,CAAC;IACd,CAAC;;AA9DM,gBAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,AAAtC,CAAuC;AAUR;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uCAAa;AAG3B;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAAgC;AAGhB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;2CAAkB;AAGjB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAAqB;AAQhE;IADC,KAAK,CAAC,MAAM,CAAC;kDAGb;AAoCH,eAAe,SAAS,CAAC","sourcesContent":["import { html, nothing } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport badgeStyle from \"./badge.css\";\nimport { watch } from \"../../utils/watch\";\nimport SgdsCloseButton from \"../CloseButton/sgds-close-button\";\nexport type BadgeVariant = \"success\" | \"danger\" | \"warning\" | \"info\" | \"neutral\";\n\n/**\n * @summary Badges can be used to highlight important bits of information such as labels, notifications & status.\n *\n * @slot default - slot for badge\n * @slot leftIcon - The slot for icon to the left of the badge text\n * @slot rightIcon - The slot for icon to the right of the badge text\n *\n * @event sgds-show - Emitted when the badge appears.\n * @event sgds-hide - Emitted after the badge closes.\n *\n * @cssprop --sgds-badge-color - The text color of badge, only if the 'variant' prop is set to 'filled' and the background color is yellow.\n * @cssprop --sgds-badge-border-radius - The border radius of badge\n * @cssprop --sgds-badge-bg - The background color of the badge. Changing 'status' prop updates this css property\n * @cssprop --sgds-badge-border-color - The border color of the badge. Changing `variant` prop to 'outline' updates this css property\n *\n */\nexport class SgdsBadge extends SgdsElement {\n  static styles = [...SgdsElement.styles, badgeStyle];\n\n  /**@internal */\n  static get scopedElements() {\n    return {\n      \"sgds-close-button\": SgdsCloseButton\n    };\n  }\n\n  /** Controls the appearance of the alert  */\n  @property({ type: Boolean, reflect: true }) show = true;\n\n  /** One or more button variant combinations buttons may be one of a variety of visual variants such as: `primary`, `info`, `success`, `danger`, `warning`, 'neutral' */\n  @property({ reflect: true }) variant: BadgeVariant = \"info\";\n\n  /** Manually set the outlined state to false */\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  /** Manually set the dismissable state of the button to `false` */\n  @property({ type: Boolean, reflect: true }) dismissible = false;\n\n  /** Closes the alert  */\n  public close() {\n    this.show = false;\n  }\n  /**@internal */\n  @watch(\"show\")\n  _handleShowChange() {\n    this.show ? this.emit(\"sgds-show\") : this.emit(\"sgds-hide\");\n  }\n\n  render() {\n    return this.show\n      ? html`\n          <div\n            class=\"  \n          ${classMap({\n              sgds: true,\n              [`badge-dismissible`]: this.dismissible,\n              badge: true,\n              show: this.show,\n              outlined: this.outlined\n            })}\n            \"\n            aria-hidden=${this.show ? \"false\" : \"true\"}\n          >\n            <slot name=\"leftIcon\" class=\"left-icon\"></slot>\n            <span class=\"badge-label\">\n              <slot></slot>\n            </span>\n            <slot name=\"rightIcon\" class=\"right-icon\"></slot>\n\n            ${this.dismissible\n              ? html`<sgds-close-button\n                  size=\"sm\"\n                  aria-label=\"close the badge\"\n                  @click=${this.close}\n                ></sgds-close-button>`\n              : nothing}\n          </div>\n        `\n      : nothing;\n  }\n}\n\nexport default SgdsBadge;\n"]}