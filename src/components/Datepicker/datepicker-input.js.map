{"version":3,"file":"datepicker-input.js","sourceRoot":"","sources":["datepicker-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAfter, isBefore, isValid, parse } from \"date-fns\";\nimport IMask, { InputMask } from \"imask\";\nimport { html } from \"lit\";\nimport { property, queryAsync } from \"lit/decorators.js\";\nimport { DATE_PATTERNS, setTimeToNoon } from \"../../utils/time\";\nimport { SgdsInput } from \"../Input/sgds-input\";\nimport datepickerInputStyles from \"./datepicker-input.css\";\nexport type DateFormat = \"MM/DD/YYYY\" | \"DD/MM/YYYY\" | \"YYYY/MM/DD\";\n\nexport class DatepickerInput extends SgdsInput {\n  static styles = [...SgdsInput.styles, datepickerInputStyles];\n  /** Date format reflected on input  */\n  @property({ type: String }) dateFormat: DateFormat = \"DD/MM/YYYY\";\n\n  /** ISO date string to set the lowest allowable date value. e.g. \"2016-05-19T12:00:00.000Z\" */\n  @property({ type: String }) minDate: string;\n\n  /** ISO date string to set the highest allowable date value. e.g. \"2016-05-19T12:00:00.000Z\" */\n  @property({ type: String }) maxDate: string;\n\n  /** Changes DatePicker to single date selection or range date selection */\n  @property({ type: String, reflect: true }) mode: \"single\" | \"range\" = \"single\";\n\n  @queryAsync(\"input\")\n  shadowInput: Promise<HTMLInputElement>;\n\n  private mask: InputMask;\n  constructor() {\n    super();\n    this.type = \"text\";\n    this.hasFeedback = true;\n    this._handleValueChange = () => null;\n  }\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.addEventListener(\"sgds-change\", this._validateInput);\n  }\n\n  async firstUpdated(changes) {\n    super.firstUpdated(changes);\n    this._applyInputMask(this.dateFormat);\n  }\n  private async _applyInputMask(dateFormat: string) {\n    const shadowInput = await this.shadowInput;\n    const imPattern =\n      this.mode === \"single\" ? DATE_PATTERNS[dateFormat].imPattern : DATE_PATTERNS[dateFormat].imRangePattern;\n    const blocks = {\n      d: { mask: IMask.MaskedRange, placeholderChar: \"d\", from: 0, to: 9, maxLength: 1 },\n      m: { mask: IMask.MaskedRange, placeholderChar: \"m\", from: 0, to: 9, maxLength: 1 },\n      y: { mask: IMask.MaskedRange, placeholderChar: \"y\", from: 0, to: 9, maxLength: 1 },\n      D: { mask: IMask.MaskedRange, placeholderChar: \"d\", from: 0, to: 9, maxLength: 1 },\n      M: { mask: IMask.MaskedRange, placeholderChar: \"m\", from: 0, to: 9, maxLength: 1 },\n      Y: { mask: IMask.MaskedRange, placeholderChar: \"y\", from: 0, to: 9, maxLength: 1 }\n    };\n    const maskOptions = {\n      mask: imPattern,\n      pattern: imPattern,\n      eager: true,\n      overwrite: true,\n      // define str -> date convertion\n      parse: function (str: string) {\n        const dates = str.split(\" - \");\n        return dates.map(date => parse(date, DATE_PATTERNS[dateFormat].fnsPattern, new Date()));\n      },\n      format: function (dateArr: Date[]) {\n        const dateStrings = dateArr.map(date => {\n          let dayStr: string,\n            monthStr = \"\";\n          const day = date.getDate();\n          const month = date.getMonth() + 1;\n          const year = date.getFullYear();\n\n          if (day < 10) dayStr = \"0\" + day;\n          if (month < 10) monthStr = \"0\" + month;\n\n          return [dayStr, monthStr, year].join(\"/\");\n        });\n        return dateStrings.join(\" - \");\n      },\n      lazy: false,\n      blocks\n    };\n\n    this.mask = IMask(shadowInput, maskOptions);\n    this.mask.on(\"accept\", () => {\n      this.value = this.mask.masked.value;\n      this.emit(\"sgds-mask-input-change\", { detail: this.value });\n    });\n    /**\n     * Validation after date is complete\n     */\n    this.mask.on(\"complete\", this._validateInput);\n  }\n  public updateMaskValue() {\n    this.mask?.updateValue();\n  }\n  private _validateInput = async () => {\n    const dates = this.mask.value.split(\" - \");\n    const noEmptyDates = dates.filter(d => d !== this.dateFormat.toLowerCase());\n    const dateArray: Date[] | string[] = noEmptyDates.map(date =>\n      setTimeToNoon(parse(date, DATE_PATTERNS[this.dateFormat].fnsPattern, new Date()))\n    );\n    const invalidDates = dateArray.filter(\n      date =>\n        !isValid(date) ||\n        isBefore(date, new Date(0, 0, 1)) ||\n        isBefore(date, setTimeToNoon(new Date(this.minDate))) ||\n        isAfter(date, setTimeToNoon(new Date(this.maxDate)))\n    );\n\n    if (invalidDates.length > 0) {\n      this.setInvalid(true);\n      return this.emit(\"sgds-invalid-input\");\n    }\n    if (this.mode === \"range\" && dateArray.length === 1) {\n      this.setInvalid(true);\n      return this.emit(\"sgds-invalid-input\");\n    }\n    if (invalidDates.length === 0 && dateArray.length > 0) {\n      this.setInvalid(false);\n      return this.emit(\"sgds-selectdates-input\", { detail: dateArray });\n    }\n    if (dateArray.length === 0 && invalidDates.length === 0) {\n      this.setInvalid(false);\n      return this.emit(\"sgds-empty-input\");\n    }\n  };\n\n  public destroyInputMask() {\n    this.mask?.destroy();\n  }\n  public async applyInputMask() {\n    return await this._applyInputMask(this.dateFormat);\n  }\n  public async focus() {\n    const input = await this.shadowInput;\n    return input.focus();\n  }\n  render() {\n    return html`\n      ${this._renderLabel()} ${this._renderHintText()}\n      <div class=\"input-container\">\n        ${this._renderInput()}\n        <slot name=\"calendar-btn\"></slot>\n        <slot name=\"reset-btn\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport default DatepickerInput;\n"]}