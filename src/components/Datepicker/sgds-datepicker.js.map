{"version":3,"file":"sgds-datepicker.js","sourceRoot":"","sources":["sgds-datepicker.ts"],"names":[],"mappings":"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","sourcesContent":["import { ScopedElementsMixin } from \"@open-wc/scoped-elements/lit-element.js\";\nimport { format, parse } from \"date-fns\";\nimport { html } from \"lit\";\nimport { property, query, queryAsync, state } from \"lit/decorators.js\";\nimport { live } from \"lit/directives/live.js\";\nimport { ref } from \"lit/directives/ref.js\";\nimport { DropdownElement } from \"../../base/dropdown-element\";\nimport { type SgdsFormControl } from \"../../utils/form\";\nimport { DATE_PATTERNS, setTimeToNoon } from \"../../utils/time\";\nimport { watch } from \"../../utils/watch\";\nimport { DatepickerCalendar } from \"./datepicker-calendar\";\nimport { DatepickerHeader } from \"./datepicker-header\";\nimport DatepickerInput from \"./datepicker-input\";\nimport { SgdsButton } from \"../Button/sgds-button\";\nimport { ViewEnum } from \"./types\";\nimport dropdownStyle from \"../Dropdown/dropdown.css\";\nimport datepickerStyle from \"./datepicker.css\";\n\nexport type DateFormat = \"MM/DD/YYYY\" | \"DD/MM/YYYY\" | \"YYYY/MM/DD\";\n\n/**\n * @summary The `DatePicker` Component is built using `Dropdown`, `Input` and `Button` components. By default, the Calendar points to today's date and input has no value. Users can either pick dates from the calendar or type dates through the input\n *\n * @event sgds-change-date - Emitted when the state of datepicker's input changes during first load, close button reset click & date click. Date values can be accessed via event.target.value\n *\n * @cssproperty --sgds-datepicker-theme-color - Datepicker's overall theme color\n * @cssproperty --sgds-datepicker-hover-bg - Datepicker's calendar menu hover color\n * @cssproperty --sgds-datepicker-bg - Datepicker's menu background color\n * @cssproperty --sgds-datepicker-close-button-bg - Datepicker's close button background color\n * @cssproperty --sgds-datepicker-close-button-hover-bg - Datepicker's close button hover background color\n * @cssproperty --sgds-datepicker-close-button-color - Datepicker's close button color\n * @cssproperty --sgds-datepicker-selected-date-bg - Selected date's background color\n * @cssproperty --sgds-datepicker-selected-date-color - Selected date's text color\n *\n * @description displayDate sets the month, year views of the calendar while focusedDate follows the focus which also directly changes\n * displayDate on certain occasions. Example, when keyboard moves up to the next month, it updates displayDate which then affect the current\n * date view of the calendar\n */\nexport class SgdsDatepicker extends ScopedElementsMixin(DropdownElement) implements SgdsFormControl {\n  static styles = [...DropdownElement.styles, dropdownStyle, datepickerStyle];\n  /**@internal */\n  static formAssociated = true;\n  private _internals: ElementInternals;\n\n  /**@internal */\n  static get scopedElements() {\n    return {\n      \"sgds-datepicker-input\": DatepickerInput,\n      \"sgds-datepicker-calendar\": DatepickerCalendar,\n      \"sgds-datepicker-header\": DatepickerHeader,\n      \"sgds-button\": SgdsButton\n    };\n  }\n\n  /** When true, adds required attribute to input element */\n  @property({ type: Boolean, reflect: true }) required = false;\n  /**The datepicker input's name attribute */\n  @property({ reflect: true }) name: string;\n  /** When true, adds disabled attribute to input and button element */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** The initial value of DatePicker on first load for single & range mode as array of string. eg.'[\"22/12/2023\"]' for single & '[\"22/12/2023\",\"25/12/2023\"]' for range respectively  */\n  @property({ type: Array, reflect: true }) initialValue: string[] = [];\n\n  /** Date format reflected on input  */\n  @property({ type: String }) dateFormat: DateFormat = \"DD/MM/YYYY\";\n\n  /** ISO date string to set the lowest allowable date value. e.g. \"2016-05-19T12:00:00.000Z\" */\n  @property({ type: String }) minDate = \"\";\n\n  /** ISO date string to set the highest allowable date value. e.g. \"2016-05-19T12:00:00.000Z\" */\n  @property({ type: String }) maxDate = \"\";\n\n  /** Changes DatePicker to single date selection or range date selection */\n  @property({ type: String, reflect: true }) mode: \"single\" | \"range\" = \"single\";\n\n  /**Feedback text for error state when date input is invalid */\n  @property({ type: String, reflect: true }) invalidFeedback = \"Please enter a valid date\";\n\n  /** The datepicker input's label  */\n  @property({ reflect: true }) label = \"\";\n\n  /** The datepicker input's hint text below the label */\n  @property({ reflect: true }) hintText = \"\";\n\n  /** Controls auto-flipping of menu */\n  @property({ type: Boolean, reflect: true, state: false })\n  noFlip = false;\n\n  /** The drop position of menu relative to the toggle button */\n  @property({ type: String, reflect: true, state: false })\n  drop: \"up\" | \"down\" = \"down\";\n\n  /** Provides the date context for Calendar to present the appropriate view. Defaults to today's date */\n  @property({ attribute: false }) displayDate: Date;\n  /**@internal */\n  @state() value = \"\";\n\n  @state()\n  private view: ViewEnum = \"days\";\n\n  @state() private selectedDateRange: Date[] = [];\n\n  @state() private focusedDate: Date;\n\n  @state() private focusedTabIndex = 3;\n\n  private initialDisplayDate: Date;\n\n  @queryAsync(\"sgds-datepicker-calendar\")\n  private calendar: Promise<DatepickerCalendar>;\n\n  @queryAsync(\"sgds-datepicker-input\")\n  private datepickerInputAsync: Promise<DatepickerInput>;\n\n  @queryAsync(\"sgds-datepicker-header\")\n  private datepickerHeaderAsync: Promise<DatepickerHeader>;\n\n  @query(\"sgds-datepicker-input\")\n  private datepickerInput: DatepickerInput;\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  public reportValidity(): boolean {\n    return this._internals.reportValidity();\n  }\n  constructor() {\n    super();\n    this._internals = this.attachInternals();\n    /**@internal */\n    this.modifierOpt = [\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 10]\n        }\n      }\n    ];\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"sgds-view\", this._handleViewChanged);\n    this.addEventListener(\"sgds-change-calendar\", this._handleDateChanged);\n    this.addEventListener(\"sgds-update-focus\", this._handleFocusDateChanged);\n    this.addEventListener(\"sgds-selectmonth\", this._handleSelectMonth);\n    this.addEventListener(\"sgds-selectyear\", this._handleSelectYear);\n    this.addEventListener(\"sgds-selectdates\", this._handleSelectDatesAndClose);\n    this.addEventListener(\"sgds-selectdates-input\", this._handleSelectDatesInput);\n    this.addEventListener(\"sgds-empty-input\", this._handleEmptyInput);\n    this.addEventListener(\"keydown\", this._handleTab);\n    this.addEventListener(\"sgds-hide\", this._handleCloseMenu);\n    this.addEventListener(\"sgds-show\", this._handleOpenMenu);\n    this.initialDisplayDate = this.displayDate || new Date();\n    if (this.initialValue && this.initialValue.length > 0) {\n      // Validate initialValue against the dateFormat regex\n      const dateFormatRegex = new RegExp(this._getDateFormatRegex());\n      // const startDateString = this.initialValue[0];\n      const invalidDates = this.initialValue.filter(v => !dateFormatRegex.test(v));\n      if (invalidDates.length > 0) {\n        return console.error(\"Invalid date format in initialValue:\", invalidDates);\n      } else {\n        const initialSelectedDates = this.initialValue.map(v =>\n          setTimeToNoon(parse(v, DATE_PATTERNS[this.dateFormat].fnsPattern, new Date()))\n        );\n        this._handleSelectDates(initialSelectedDates);\n      }\n    } else {\n      this.displayDate = this.initialDisplayDate;\n    }\n  }\n\n  async firstUpdated() {\n    super.firstUpdated();\n    if (this.menuIsOpen) {\n      const input = await this.datepickerInputAsync;\n      this.showMenu();\n      const cal = await this.calendar;\n      cal.focusOnCalendar(input);\n    }\n\n    const shadowInput = await this.datepickerInput.shadowInput;\n    this._manageInternalsDefault(shadowInput);\n    this._internals.setValidity(shadowInput.validity, shadowInput.validationMessage, shadowInput);\n  }\n\n  /** @internal */\n  private _getDateFormatRegex(): string {\n    // validate date strings and adhere to the specified date format\n    return (\n      this.dateFormat\n        // Replace any special characters with their escaped version using \"\\\\$&\"\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")\n        // Replace 'MM' with '\\\\d{2}', which matches two digits representing the month (e.g., 01, 12)\n        .replace(\"MM\", \"\\\\d{2}\")\n        // Replace 'DD' with '\\\\d{2}', which matches two digits representing the day (e.g., 01, 31)\n        .replace(\"DD\", \"\\\\d{2}\")\n        // Replace 'YYYY' with '\\\\d{4}', which matches four digits representing the year (e.g., 2021)\n        .replace(\"YYYY\", \"\\\\d{4}\")\n        // Replace '/' with '\\\\/', which matches the forward slash character\n        .replace(\"/\", \"\\\\/\")\n    );\n  }\n  private _handleTab(event: KeyboardEvent) {\n    if (!this.menuIsOpen) {\n      return;\n    }\n    const tabIndexArray = Array(4);\n    if (event.shiftKey && event.key === \"Tab\") {\n      event.preventDefault();\n      this.focusedTabIndex = (this.focusedTabIndex - 1 + tabIndexArray.length) % tabIndexArray.length;\n    } else if (event.key === \"Tab\") {\n      event.preventDefault();\n      this.focusedTabIndex = (this.focusedTabIndex + 1 + tabIndexArray.length) % tabIndexArray.length;\n    }\n  }\n\n  @watch(\"value\")\n  _handleValueChange() {\n    this.emit(\"sgds-change-date\");\n    this._setInternalFormValue(this.value);\n  }\n\n  private async _handleCloseMenu() {\n    //return focus to input when menu closes\n    const input = await this.datepickerInputAsync;\n    input.focus();\n\n    if (this.selectedDateRange.length === 0) {\n      this.displayDate = this.initialDisplayDate;\n    } else {\n      const selectedDatesLength = this.selectedDateRange.length;\n      this.displayDate = this.selectedDateRange[selectedDatesLength - 1];\n      const calendar = await this.calendar;\n      calendar._updateFocusedDate();\n    }\n  }\n  private async _handleOpenMenu() {\n    const cal = await this.calendar;\n    const input = await this.datepickerInputAsync;\n    cal.focusOnCalendar(input);\n  }\n\n  private _makeInputValueString = (startDate: Date, endDate: Date, dateFormat: string) => {\n    if (!startDate && !endDate) return this.value;\n    const formatDate = (date: Date) => format(date, DATE_PATTERNS[dateFormat].fnsPattern);\n    switch (this.mode) {\n      case \"single\": {\n        if (startDate) {\n          this.value = formatDate(startDate);\n        }\n        break;\n      }\n      case \"range\": {\n        if (startDate && endDate) {\n          this.value = `${formatDate(startDate)} - ${formatDate(endDate)}`;\n        }\n        if (startDate && !endDate) {\n          this.value = `${formatDate(startDate)} - ${this.dateFormat.toLowerCase()}`;\n        }\n        break;\n      }\n    }\n    return this.value;\n  };\n  private _handleSelectDatesInput(event: CustomEvent<Date[]>) {\n    this._handleSelectDates(event.detail);\n    this._manageInternalsDefault(this._shadowInput);\n  }\n  private async _handleSelectDates(newSelectedDates: Date[]) {\n    newSelectedDates.sort((a: Date, b: Date) => a.getTime() - b.getTime());\n    this.displayDate = newSelectedDates[0];\n    this.focusedDate = newSelectedDates[0];\n    this.selectedDateRange = newSelectedDates;\n\n    // Get the formattedDate value for the selected dates\n    const formattedDate = this._makeInputValueString(\n      this.selectedDateRange[0],\n      this.selectedDateRange[1],\n      this.dateFormat\n    );\n\n    // Set formattedDate value as the new value for sgds-input\n    this.value = formattedDate;\n    const input = await this.datepickerInputAsync;\n    input.updateMaskValue();\n  }\n\n  private get _shadowInput() {\n    return this.datepickerInput.shadowRoot.querySelector(\"input\");\n  }\n  private _handleSelectDatesAndClose(event: CustomEvent<Date[]>) {\n    this._handleSelectDates(event.detail);\n\n    if (this.mode === \"range\" && this.selectedDateRange.length === 2) {\n      this.hideMenu();\n    } else if (this.mode === \"single\" && this.selectedDateRange.length === 1) {\n      this.hideMenu();\n    }\n    this._manageInternalsValid();\n  }\n\n  /** update latest view state from datepicker-header */\n  private _handleViewChanged(event: CustomEvent<string>) {\n    this.view = event.detail as ViewEnum;\n  }\n\n  private _handleDateChanged(event: CustomEvent<Date>) {\n    this.displayDate = event.detail;\n  }\n  private _handleFocusDateChanged(event: CustomEvent<Date>) {\n    this.focusedDate = event.detail;\n  }\n\n  private _handleSelectMonth(event: CustomEvent<Date>) {\n    this.displayDate = event.detail;\n  }\n\n  private _handleSelectYear(event: CustomEvent<Date>) {\n    this.displayDate = event.detail;\n  }\n  private async _handleInvalidInput() {\n    this.selectedDateRange = [];\n    this.displayDate = this.initialDisplayDate;\n    this._manageInternalsBadInput();\n  }\n  private async _handleButtonResetClick() {\n    this.displayDate = this.initialDisplayDate;\n    this.selectedDateRange = [];\n    this.value = \"\";\n    this.view = \"days\";\n    this.hideMenu();\n    const input = await this.datepickerInputAsync;\n    input.setInvalid(false);\n    input.destroyInputMask();\n    await input.applyInputMask();\n\n    this._manageInternalsRequired();\n  }\n\n  private async _handleEmptyInput() {\n    this._manageInternalsRequired();\n  }\n\n  private _manageInternalsRequired() {\n    this.required\n      ? this._internals.setValidity(\n          {\n            valueMissing: true\n          },\n          \"Please fill in this field\",\n          this._shadowInput\n        )\n      : this._internals.setValidity({});\n  }\n  private _manageInternalsBadInput() {\n    this._internals.setValidity(\n      {\n        badInput: true\n      },\n      \"The chosen date(s) are invalid\",\n      this._shadowInput\n    );\n  }\n\n  private _manageInternalsValid() {\n    this._internals.setValidity({});\n  }\n\n  private _manageInternalsDefault(inputEl: HTMLInputElement) {\n    this._internals.setValidity(inputEl.validity, inputEl.validationMessage, inputEl);\n  }\n\n  private _setInternalFormValue(value: string) {\n    this._internals.setFormValue(value);\n  }\n\n  private async _handleInputMaskChange(e: CustomEvent) {\n    this.value = e.detail;\n  }\n\n  private _dialogAriaLabels = {\n    days: \"Choose date\",\n    months: \"Choose month\",\n    years: \"Choose year\"\n  };\n\n  render() {\n    const svgEl = html`\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        fill=\"currentColor\"\n        class=\"bi bi-x\"\n        viewBox=\"0 0 16 16\"\n      >\n        <path\n          d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"\n        />\n      </svg>\n    `;\n\n    return html`\n      <div>\n        <sgds-datepicker-input\n          .value=${live(this.value)}\n          ?required=${this.required}\n          ?disabled=${this.disabled}\n          placeholder=\"\"\n          ${ref(this.myDropdown)}\n          mode=${this.mode}\n          dateFormat=${this.dateFormat}\n          invalidFeedback=${this.invalidFeedback}\n          @sgds-mask-input-change=${this._handleInputMaskChange}\n          @sgds-invalid-input=${this._handleInvalidInput}\n          minDate=${this.minDate}\n          maxDate=${this.maxDate}\n          label=${this.label}\n          hintText=${this.hintText}\n          name=${this.name}\n        >\n          <sgds-button\n            role=\"button\"\n            slot=\"calendar-btn\"\n            class=\"calendar-btn\"\n            aria-expanded=\"${this.menuIsOpen}\"\n            aria-haspopup=\"dialog\"\n            aria-controls=${this.dropdownMenuId}\n            @click=${() => this.toggleMenu()}\n            ariaLabel=${this.menuIsOpen ? \"Close Calendar\" : \"Open Calendar\"}\n            ?disabled=${this.disabled}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"currentColor\"\n              class=\"bi bi-calendar\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path\n                d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z\"\n              />\n            </svg>\n          </sgds-button>\n          <sgds-button\n            role=\"button\"\n            slot=\"reset-btn\"\n            variant=\"primary\"\n            ?disabled=${this.disabled}\n            class=\"reset-btn\"\n            @click=${() => this._handleButtonResetClick()}\n            ariaLabel=\"Reset Datepicker\"\n          >\n            ${svgEl}\n          </sgds-button>\n        </sgds-datepicker-input>\n\n        <ul\n          id=${this.dropdownMenuId}\n          class=\"sgds datepicker dropdown-menu\"\n          role=\"dialog\"\n          part=\"menu\"\n          aria-label=${this._dialogAriaLabels[this.view]}\n          @click=${(event: MouseEvent) => event.stopPropagation()}\n        >\n          <sgds-datepicker-header\n            .view=${this.view}\n            .displayDate=${this.displayDate}\n            .focusedDate=${this.focusedDate}\n            .selectedDate=${this.selectedDateRange}\n            .focusedTabIndex=${this.focusedTabIndex}\n          ></sgds-datepicker-header>\n          <sgds-datepicker-calendar\n            .show=${this.menuIsOpen}\n            .view=${this.view}\n            .displayDate=${this.displayDate}\n            .mode=${this.mode}\n            minDate=${this.minDate}\n            maxDate=${this.maxDate}\n            .selectedDate=${this.selectedDateRange}\n            .focusedTabIndex=${this.focusedTabIndex}\n          ></sgds-datepicker-calendar>\n        </ul>\n      </div>\n    `;\n  }\n}\n\nexport default SgdsDatepicker;\n"]}