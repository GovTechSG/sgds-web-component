{"version":3,"file":"sgds-alert.js","sourceRoot":"","sources":["sgds-alert.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAC9E,OAAO,eAAe,MAAM,kCAAkC,CAAC;AAG/D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,OAAO,SAAU,SAAQ,mBAAmB,CAAC,WAAW,CAAC;IAA/D;;QAQE,4CAA4C;QACA,SAAI,GAAG,KAAK,CAAC;QAEzD,wEAAwE;QAC5B,gBAAW,GAAG,KAAK,CAAC;QAEhE,iCAAiC;QACU,YAAO,GAAiB,SAAS,CAAC;QAE7E,sFAAsF;QAC1C,aAAQ,GAAG,KAAK,CAAC;IAkC/D,CAAC;IAlDC,eAAe;IACf,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,mBAAmB,EAAE,eAAe;SACrC,CAAC;IACJ,CAAC;IAaD,wBAAwB;IACjB,KAAK;QACV,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IACD,eAAe;IAEf,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC;IACD,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI;YACd,CAAC,CAAC,IAAI,CAAA;;qBAES,QAAQ,CAAC;gBAChB,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,WAAW;aACxC,CAAC;;0BAEY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;;;;cAIxC,IAAI,CAAC,WAAW;gBAChB,CAAC,CAAC,IAAI,CAAA,0DAA0D,IAAI,CAAC,KAAK,uBAAuB;gBACjG,CAAC,CAAC,OAAO;;SAEd;YACH,CAAC,CAAC,OAAO,CAAC;IACd,CAAC;;AAlDM,gBAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,AAAtC,CAAuC;AAQR;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uCAAc;AAGb;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAAqB;AAGrB;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAAmC;AAGjC;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;2CAAkB;AAQ7D;IADC,KAAK,CAAC,MAAM,CAAC;kDAGb;AA0BH,eAAe,SAAS,CAAC","sourcesContent":["import { nothing } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit/static-html.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport { watch } from \"../../utils/watch\";\nimport alertStyle from \"./alert.css\";\nimport { ScopedElementsMixin } from \"@open-wc/scoped-elements/lit-element.js\";\nimport SgdsCloseButton from \"../CloseButton/sgds-close-button\";\n\nexport type AlertVariant = \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\";\n/**\n * @summary Alerts provide short, timely, and relevant information for your users. It can be a simple text message or customised HTML content with paragraphs, headings and links.\n *\n * @slot default - The alert's main content.\n * @slot icon - An icon to show in the alert. Pass in SVG elements.\n *\n * @event sgds-show - Emitted when the alert appears.\n * @event sgds-hide - Emitted after the alert closes.\n *\n * @cssproperty --sgds-alert-bg - The background color of alert\n * @cssproperty --sgds-alert-padding-x - The x-axis padding of alert\n * @cssproperty --sgds-alert-padding-y - The y-axis padding of alert\n * @cssproperty --sgds-alert-margin-bottom - The bottom margin of alert\n * @cssproperty --sgds-alert-color - The text color of alert\n * @cssproperty --sgds-alert-border-color - The color of the border of alert\n * @cssproperty --sgds-alert-border-width - The width of the border of alert\n * @cssproperty --sgds-alert-border-radius - The border radius of alert\n * @cssproperty --sgds-alert-link-color - The link color of alert\n * @cssproperty --sgds-alert-icon-gap - The gap between the icon and alert text\n *\n */\nexport class SgdsAlert extends ScopedElementsMixin(SgdsElement) {\n  static styles = [...SgdsElement.styles, alertStyle];\n  /**@internal */\n  static get scopedElements() {\n    return {\n      \"sgds-close-button\": SgdsCloseButton\n    };\n  }\n  /** Controls the appearance of the alert  */\n  @property({ type: Boolean, reflect: true }) show = false;\n\n  /** Enables a close button that allows the user to dismiss the alert. */\n  @property({ type: Boolean, reflect: true }) dismissible = false;\n\n  /** The alert's theme variant. */\n  @property({ type: String, reflect: true }) variant: AlertVariant = \"primary\";\n\n  /** Controls the alert visual between a lighter outline and a solid darker variant. */\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  /** Closes the alert  */\n  public close() {\n    this.show = false;\n  }\n  /**@internal */\n  @watch(\"show\")\n  _handleShowChange() {\n    this.show ? this.emit(\"sgds-show\") : this.emit(\"sgds-hide\");\n  }\n  render() {\n    return this.show\n      ? html`\n          <div\n            class=\"${classMap({\n              sgds: true,\n              alert: true,\n              fade: true,\n              show: this.show,\n              [`alert-dismissible`]: this.dismissible\n            })}\"\n            role=\"alert\"\n            aria-hidden=${this.show ? \"false\" : \"true\"}\n          >\n            <i><slot name=\"icon\"></slot></i>\n            <slot></slot>\n            ${this.dismissible\n              ? html`<sgds-close-button aria-label=\"close the alert\" @click=${this.close}></sgds-close-button>`\n              : nothing}\n          </div>\n        `\n      : nothing;\n  }\n}\n\nexport default SgdsAlert;\n"]}