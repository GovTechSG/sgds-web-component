{"version":3,"file":"sgds-tooltip.js","sourceRoot":"","sources":["sgds-tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Options as PopperOptions } from \"@popperjs/core\";\nimport Tooltip from \"bootstrap/js/src/tooltip\";\nimport type { Tooltip as BsTooltip } from \"bootstrap\";\n\nimport { html } from \"lit\";\nimport { property, queryAssignedElements, state } from \"lit/decorators.js\";\nimport { Ref, createRef, ref } from \"lit/directives/ref.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport tooltipStyle from \"./tooltip.css\";\n/**\n * @summary Tooltips display more information when users hover over, focus on, or interact with an element.\n * @slot default - The element to target the tooltip to.\n *\n * @cssproperty --sgds-tooltip-z-index - The z-index of tooltip\n * @cssproperty --sgds-tooltip-max-width - The max width of tooltip\n * @cssproperty --sgds-tooltip-padding-x - The left and right padding of tooltip\n * @cssproperty --sgds-tooltip-padding-y - The top and bottom padding of tooltip\n * @cssproperty --sgds-tooltip-font-size - The font size of tooltip\n * @cssproperty --sgds-tooltip-color - The text color of tooltip\n * @cssproperty --sgds-tooltip-bg - The background color of tooltip\n * @cssproperty --sgds-tooltip-border-radius - The border radius of tooltip\n * @cssproperty --sgds-tooltip-opacity - The opacity of tooltip\n *\n */\nexport class SgdsTooltip extends SgdsElement {\n  static styles = [...SgdsElement.styles, tooltipStyle];\n\n  private myTooltip: Ref<HTMLElement> = createRef();\n\n  private bsTooltip: BsTooltip = null;\n\n  /** The tooltip's content. Content has to be textual */\n  @property({ type: String })\n  content = \"\";\n  /** The placement of tooltip relative to its target */\n  @property({ type: String })\n  placement: \"top\" | \"bottom\" | \"left\" | \"right\" = \"top\";\n  /** The method to invoke the tooltip. `hover focus` is the default value which allows tooltip to be triggered via mouse hover and keyboard focus. Add `tabindex=0 `for HTMLelements that are not tabbable. */\n  @property({ type: String })\n  trigger: \"click\" | \"hover\" | \"focus\" | \"hover focus\" = \"hover focus\";\n\n  /**@internal */\n  @state()\n  private popperConfig: Partial<PopperOptions>;\n  /**@internal */\n\n  private tooltipConfig: Partial<BsTooltip.Options>;\n  /**@internal */\n  @queryAssignedElements()\n  private tooltipTargetElements: Array<HTMLElement>;\n\n  private _handleSlotChange(): void {\n    // For a11y purpose\n    this.tooltipTargetElements.forEach(el => el.setAttribute(\"data-sgds-tooltip\", this.content));\n  }\n\n  private _handleClickOutOfElement(e: MouseEvent | TouchEvent, self: SgdsTooltip) {\n    if (!e.composedPath().includes(self)) {\n      this.hide();\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this.trigger === \"click\") {\n      document.addEventListener(\"click\", (event: MouseEvent) => this._handleClickOutOfElement(event, this));\n      document.addEventListener(\"touchstart\", (event: TouchEvent) => this._handleClickOutOfElement(event, this));\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    document.removeEventListener(\"click\", (event: MouseEvent) => this._handleClickOutOfElement(event, this));\n    document.removeEventListener(\"touchstart\", (event: TouchEvent) => this._handleClickOutOfElement(event, this));\n  }\n\n  private initializeTooltip() {\n    this.tooltipConfig = {\n      popperConfig: (defaultConfig?: Partial<PopperOptions>) => {\n        this.popperConfig = defaultConfig;\n        const defaultModifiers = defaultConfig.modifiers;\n        const newModifiers = defaultModifiers.map(mod => {\n          if (mod.name === \"flip\") {\n            mod.options.fallbackPlacements = [];\n          }\n          return mod;\n        });\n        this.popperConfig.modifiers = newModifiers;\n        return this.popperConfig;\n      },\n      placement: this.placement,\n      trigger: this.trigger,\n      title: this.content,\n      html: true,\n      container: this.shadowRoot.querySelector(\"div\") // tooltip to appear inside the shadow root of sgds-tooltip instead of anywhere in the DOM, so that scoped styles can apply\n    } as Partial<BsTooltip.Options>;\n    this.bsTooltip = new Tooltip(this.myTooltip.value, this.tooltipConfig);\n  }\n\n  firstUpdated() {\n    this.initializeTooltip();\n    this.myTooltip.value.addEventListener(\"show.bs.tooltip\", () => {\n      this.emit(\"sgds-show\");\n    });\n    this.myTooltip.value.addEventListener(\"shown.bs.tooltip\", () => {\n      this.emit(\"sgds-after-show\");\n    });\n    this.myTooltip.value.addEventListener(\"hide.bs.tooltip\", () => {\n      this.emit(\"sgds-hide\");\n    });\n    this.myTooltip.value.addEventListener(\"hidden.bs.tooltip\", () => {\n      this.emit(\"sgds-after-hide\");\n    });\n  }\n  /** Hides the Tooltip */\n  public hide() {\n    this.bsTooltip.hide();\n  }\n  /** Shows the Tooltip */\n  public show() {\n    this.bsTooltip.show();\n  }\n\n  render() {\n    return html`\n      <div ${ref(this.myTooltip)}>\n        <slot @slotchange=${this._handleSlotChange}></slot>\n      </div>\n    `;\n  }\n}\n\nexport default SgdsTooltip;\n"]}