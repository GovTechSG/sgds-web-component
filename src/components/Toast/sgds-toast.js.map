{"version":3,"file":"sgds-toast.js","sourceRoot":"","sources":["sgds-toast.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, query } from \"lit/decorators.js\";\nimport { ScopedElementsMixin } from \"@open-wc/scoped-elements/lit-element.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { html } from \"lit/static-html.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport { animateTo } from \"../../utils/animate\";\nimport { getAnimation, setDefaultAnimation } from \"../../utils/animation-registry\";\nimport { waitForEvent } from \"../../utils/event\";\nimport { watch } from \"../../utils/watch\";\nimport toastStyle from \"./toast.css\";\nimport SgdsCloseButton from \"../CloseButton/sgds-close-button\";\n/**\n * @summary Toast allows you to convey quick messaging notifications to the user.\n *\n * @slot default - The content to pass into toast's body\n * @slot icon - The slot to pass in icon to toast's header\n * @slot duration - When required, pass in the duration since toast appeared to this slot\n *\n *\n * @event sgds-show - Emitted on show.\n * @event sgds-after-show - Emitted on show after animation has completed.\n * @event sgds-hide - Emitted on hide.\n * @event sgds-after-hide - Emitted on hide after animation has completed.\n *\n * @cssproperty --sgds-toast-max-width - The maximum width of toast\n * @cssproperty --sgds-toast-gap - The gap between header and body of toast\n * @cssproperty --sgds-toast-padding - The padding of toast\n * @cssproperty --sgds-toast-bg - The background color of toast\n * @cssproperty --sgds-toast-border-width - The width of the border of toast\n * @cssproperty --sgds-toast-border-left-width - The width of the left border of toast\n * @cssproperty --sgds-toast-border-radius - The border radius of toast\n * @cssproperty --sgds-toast-border-color - The color of the border of toast\n * @cssproperty --sgds-toast-box-shadow - The box shadow of toast\n * @cssproperty --sgds-toast-font-size - The font size of toast\n * @cssproperty --sgds-toast-color - The text color of toast\n * @cssproperty --sgds-toast-header-gap - The gap between the elements in the header\n * @cssproperty --sgds-toast-header-color - The title color of the toast header\n * @cssproperty --sgds-toast-header-icon-color - The icon color of the toast header\n */\nexport class SgdsToast extends ScopedElementsMixin(SgdsElement) {\n  static styles = [...SgdsElement.styles, toastStyle];\n  /**@internal */\n  static get scopedElements() {\n    return {\n      \"sgds-close-button\": SgdsCloseButton\n    };\n  }\n\n  /**@internal */\n  @query(\"div.toast\") toast: HTMLElement;\n  /** Controls the appearance of toast */\n  @property({ type: Boolean, reflect: true }) show = false;\n  /** The header title of toast. It is required to assign a title to toast */\n  @property({ type: String, reflect: true }) title = \"Title\";\n  /** Controls whether the toast has fade animation during its appearance/disappearance */\n  @property({ type: Boolean, reflect: true }) noAnimation = false;\n  /** Controls if the toast will hide itself after the delay time. Works with delay property */\n  @property({ type: Boolean, reflect: true }) autohide = false;\n  /** The amount of time taken for toast to disappear after its first render. It takes effect only when autohide is set to true */\n  @property({ type: Number, reflect: true }) delay = 5000;\n  /**Adds CSS styling to `<Toast />` based on the defined status */\n  @property({ type: String, reflect: true }) status: \"success\" | \"warning\" | \"danger\" | \"info\";\n\n  /** Shows the toast */\n  public async showToast() {\n    if (this.show) {\n      return;\n    }\n\n    this.show = true;\n    return waitForEvent(this, \"sgds-after-show\");\n  }\n\n  /** Hide the toast */\n  public async hideToast() {\n    if (!this.show) {\n      return;\n    }\n    this.show = false;\n    return waitForEvent(this, \"sgds-after-hide\");\n  }\n\n  /** @internal */\n  handleCloseClick() {\n    this.show = false;\n    this.emit(\"sgds-close\");\n  }\n  /**@internal */\n  @watch(\"show\", { waitUntilFirstUpdate: true })\n  async handleShowChange() {\n    if (this.show) {\n      this.emit(\"sgds-show\");\n      this.toast.hidden = !this.show;\n\n      const toastAnimation = getAnimation(this, \"toast.show\");\n      !this.noAnimation && (await animateTo(this.toast, toastAnimation.keyframes, toastAnimation.options));\n\n      this.emit(\"sgds-after-show\");\n    } else {\n      this.emit(\"sgds-hide\");\n      const toastAnimation = getAnimation(this, \"toast.hide\");\n\n      !this.noAnimation && (await animateTo(this.toast, toastAnimation.keyframes, toastAnimation.options));\n      this.emit(\"sgds-after-hide\");\n      this.toast.hidden = !this.show;\n    }\n  }\n  protected firstUpdated(): void {\n    this.toast.hidden = !this.show;\n  }\n\n  render() {\n    if (this.autohide && this.show) {\n      setTimeout(() => {\n        this.show = false;\n      }, this.delay);\n    }\n    return html`\n      <div\n        class=\"toast sgds show ${classMap({\n          [`is-${this.status}`]: this.status\n        })}\"\n        role=\"alert\"\n        aria-hidden=${this.show ? \"false\" : \"true\"}\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n      >\n        <div class=\"toast-header\">\n          <slot name=\"icon\"></slot>\n          <strong>${this.title}</strong>\n          <small><slot name=\"duration\"></slot></small>\n          <sgds-close-button ariaLabel=\"close toast\" @click=${this.handleCloseClick}></sgds-close-button>\n        </div>\n        <div class=\"toast-body\"><slot></slot></div>\n      </div>\n    `;\n  }\n}\n\nexport default SgdsToast;\n\nsetDefaultAnimation(\"toast.show\", {\n  keyframes: [{ opacity: 0 }, { opacity: 1 }],\n  options: { duration: 400, easing: \"ease\" }\n});\nsetDefaultAnimation(\"toast.hide\", {\n  keyframes: [{ opacity: 1 }, { opacity: 0 }],\n  options: { duration: 400, easing: \"ease\" }\n});\n"]}