{"version":3,"file":"sgds-card.js","sourceRoot":"","sources":["sgds-card.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,OAAO,QAAS,SAAQ,WAAW;IAAzC;;QAGE,sEAAsE;QACzC,kBAAa,GAAG,KAAK,CAAC;IA2CrD,CAAC;IAzCC,oBAAoB,CAAC,CAAQ;QAC3B,MAAM,UAAU,GAAI,CAAC,CAAC,MAA0B,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAA2B,CAAC;QAC5G,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,OAAO,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAC7E,CAAC;QACD,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAChD,CAAC;QACD,OAAO;IACT,CAAC;IAED,mBAAmB,CAAC,CAAQ;QAC1B,MAAM,UAAU,GAAI,CAAC,CAAC,MAA0B,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAiC,CAAC;QAClH,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,OAAO,OAAO,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IACD,MAAM;QACJ,OAAO,IAAI,CAAA;;iBAEE,QAAQ,CAAC;YAChB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,CAAC,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS;YAC1C,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO;YACpC,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW;SACjD,CAAC;;;;8CAIoC,IAAI,CAAC,mBAAmB;;;;;;+CAMvB,IAAI,CAAC,oBAAoB;;;KAGnE,CAAC;IACJ,CAAC;;AA7CM,eAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,AAArC,CAAsC;AAGtB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;+CAAuB;AA6CrD,eAAe,QAAQ,CAAC","sourcesContent":["import { html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { CardElement } from \"../../base/card-element\";\nimport cardStyle from \"./card.css\";\n\n/**\n * @summary Cards can be used for headers and footers, a wide variety of content, contain contextual background colors and images.\n * @slot card-title - The title of the card\n * @slot card-text - The paragrapher text of the card\n * @slot card-image - Accepts an image or svg element of the card. Only a single element is allowed to be passed in.\n * @slot card-link - Accepts an anchor element. Only a single element is allowed to be passed in.\n *\n *\n * @csspart base - The card base wrapper\n * @csspart body - The card body\n * @csspart title - The card title\n * @csspart text - The card text\n *\n * @cssprop --sgds-card-bg - The background color of the card\n * @cssprop --sgds-card-height - The height of the card. By default, height of card depends on the size of its children\n * @cssprop --sgds-card-border-width - The border width of card\n * @cssprop --sgds-card-border-color - The border color of card\n * @cssprop --sgds-card-border-radius - The border radius of card\n * @cssprop --sgds-card-box-shadow - The box-shadow of card\n * @cssprop --sgds-card-inner-border-radius - The inner border radius of card. Useful in cases where card image is applied to prevent image border from exceeding the outer borders of the card\n * @cssprop --sgds-card-body-color - The text color of the items in card body. This includes title, subtitle and excludes link.\n * @cssprop --sgds-card-body-padding - The padding of the card body\n * @cssprop --sgds-card-title-color - The text color of card title\n * @cssprop --sgds-card-title-margin-bottom - The margin-bottom of card title\n *\n */\nexport class SgdsCard extends CardElement {\n  static styles = [...CardElement.styles, cardStyle];\n\n  /** Extends the link passed in slot[name=\"link\"] to the entire card */\n  @property({ type: Boolean }) stretchedLink = false;\n\n  handleLinkSlotChange(e: Event) {\n    const childNodes = (e.target as HTMLSlotElement).assignedNodes({ flatten: true }) as Array<HTMLLinkElement>;\n    if (childNodes.length > 1) {\n      return console.error(\"Multiple elements passed into SgdsCard's link slot\");\n    }\n    if (this.stretchedLink) {\n      childNodes[0].classList.add(\"stretched-link\");\n    }\n    return;\n  }\n\n  handleImgSlotChange(e: Event) {\n    const childNodes = (e.target as HTMLSlotElement).assignedNodes({ flatten: true }) as Array<HTMLOrSVGImageElement>;\n    if (childNodes.length > 1) {\n      return console.error(\"Multiple elements passed into SgdsCard's image slot\");\n    }\n  }\n  render() {\n    return html`\n      <div\n        class=\"${classMap({\n          sgds: true,\n          card: true,\n          [`text-${this.textColor}`]: this.textColor,\n          [`bg-${this.bgColor}`]: this.bgColor,\n          [`border-${this.borderColor}`]: this.borderColor\n        })}\n        \"\n        part=\"base\"\n      >\n        <slot name=\"card-image\" @slotchange=${this.handleImgSlotChange}></slot>\n        <div class=\"card-body\" part=\"body\">\n          <h3 class=\"card-title \" part=\"title\"><slot name=\"card-title\"></slot></h3>\n          <p class=\"card-text\" part=\"text\">\n            <slot name=\"card-text\"></slot>\n          </p>\n          <slot name=\"card-link\" @slotchange=${this.handleLinkSlotChange}></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport default SgdsCard;\n"]}