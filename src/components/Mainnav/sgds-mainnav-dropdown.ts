import { html } from "lit";
import { consume } from "@lit/context";
import { property, query, queryAssignedElements, state } from "lit/decorators.js";
import { SgdsMainnav } from "./sgds-mainnav";
import { classMap } from "lit/directives/class-map.js";
import genId from "../../utils/generateId";
import dropdownStyle from "../Dropdown/dropdown.css";
import dropdownMenuStyle from "../Dropdown/dropdown-menu.css";
import mainnavDropdownStyle from "./mainnav-dropdown.css";
import SgdsDropdown from "../Dropdown/sgds-dropdown";
import SgdsDropdownItem from "../Dropdown/sgds-dropdown-item";
import SgdsIcon from "../Icon/sgds-icon";
import { MainnavContext } from "./mainnav-context";
import SgdsElement from "../../base/sgds-element";

const TAB = "Tab";
const ENTER = "Enter";
const SPACE = " ";

/**
 * @slot default - The menu items. Pass in sgds-dropdown-item as the menu items
 * @slot toggler - The content of the toggler to pass in html content.
 */
export class SgdsMainnavDropdown extends SgdsElement {
  static styles = [...SgdsElement.styles, dropdownStyle, dropdownMenuStyle, mainnavDropdownStyle];
  /** @internal */
  static dependencies = {
    "sgds-dropdown": SgdsDropdown,
    "sgds-dropdown-item": SgdsDropdownItem,
    "sgds-icon": SgdsIcon
  };

  @consume({ context: MainnavContext, subscribe: true })
  @state()
  private _breakpointReached = true;

  @consume({ context: MainnavContext, subscribe: true })
  @state()
  private expanded: boolean;

  /** @internal */
  @query(".nav-link") navLink: HTMLElement;

  /** @internal */
  @query(".dropdown-items") dropdownItems: HTMLElement;

  /** @internal */
  @query(".dropdown-items a") menuHeaderButton: HTMLElement;

  /** @internal */
  @query(".dropdown-items span") menuHeaderText: HTMLElement;

  /** @internal Forwards value to id attribute of toggle button of Dropdown. An unique id generated by default */
  private togglerId: string = genId("dropdown", "button");

  /** When true,  applies active styles on the dropdown button */
  @property({ type: Boolean })
  active = false;

  /** When true,  applies active styles on the dropdown button */
  @property({ type: Boolean, reflect: true })
  disabled = false;

  /** @internal */
  @queryAssignedElements({ slot: "toggler" }) private togglerNodes!: HTMLElement[];

  /** @internal */
  @queryAssignedElements() private defaultNodes!: SgdsDropdownItem[];

  //   connectedCallback() {
  //   super.connectedCallback();
  //   document.addEventListener("sgds-after-hide", (e: CustomEvent) => {
  //     const target = e.target as HTMLElement;
  //     const mainnav = target.closest("sgds-mainnav") as SgdsMainnav;
  //     if (mainnav) {
  //       this._resetDropdownMenu();
  //       this._hideDropdownMenuItems();
  //     }
  //   });
  // }

  // disconnectedCallback() {
  //   super.disconnectedCallback();
  //   // Clean up the event listener when the element is removed from the DOM
  //   document.removeEventListener("sgds-after-hide", () => {
  //     this._resetDropdownMenu();
  //     this._hideDropdownMenuItems();
  //   });
  // }


  /** @internal */
  get defaultSlotItems(): SgdsDropdownItem[] {
    return [...(this.defaultNodes || [])].filter(
      (node: HTMLElement) => typeof node.tagName !== "undefined"
    ) as SgdsDropdownItem[];
  }

  // protected willUpdate(changedProperties: Map<string, unknown>) {
  //   super.willUpdate(changedProperties);

  //   if (!this.shadowRoot) {
  //     return;
  //   }
  //   // console.log(this._breakpointReached)
  //   // if(changedProperties.has('_breakpointReached')){
  //   //   console.log("breakpoint changed")
  //   // }
  //   // if (this._breakpointReached) {
  //   //   console.log('whats this doing')
  //   //   this.shadowRoot.adoptedStyleSheets = [dropdownMenuStyle.styleSheet, mainnavDropdownStyle.styleSheet];
  //   // }

  // }

  updated() {
    if (this._breakpointReached) {
      console.log('breakpoint reached')
      this._copyTextToMenu();
      this._resetDropdownMenu();
      this._hideDropdownMenuItems();
    }
    if(!this.expanded){
            this._resetDropdownMenu();
    }
  }

  private _handleSlotChange(e: Event) {
    const items = (e.target as HTMLSlotElement).assignedElements({ flatten: true }) as SgdsDropdownItem[];
    items.forEach(item => {
      item.addEventListener("keydown", this._handleKeyboardMenuItemsEvent.bind(this));

      const dropdownItem = item.shadowRoot.querySelector(".dropdown-item") as HTMLElement;
      dropdownItem.classList.add("nav-link");

      const link = item.shadowRoot?.querySelector("a") || item.querySelector("a");
      link.tabIndex = -1;
      if (dropdownItem.classList.contains("disabled")) {
        link.setAttribute("href", "javascript:void(0)");
        link.setAttribute("tabindex", "-1");
      } else {
        link.addEventListener("click", (e: Event) => {
          const target = e.target as HTMLElement;
          const mainnav = target.closest("sgds-mainnav") as SgdsMainnav;
          mainnav.hide();
        });
      }
    });
  }

  private _handleDesktopSlotChange(e: Event) {
    const items = (e.target as HTMLSlotElement).assignedElements({ flatten: true }) as SgdsDropdownItem[];
    items.forEach(item => {
      const dropdownItem = item.shadowRoot.querySelector(".dropdown-item") as HTMLElement;
      dropdownItem.classList.remove("nav-link");

      const slottedItem = (item.shadowRoot.querySelector(".dropdown-item slot") as HTMLSlotElement).assignedElements({
        flatten: true
      });
      slottedItem.forEach(item => {
        if (dropdownItem.classList.contains("disabled")) {
          item.setAttribute("href", "javascript:void(0)");
          item.setAttribute("tabindex", "-1");
        }
      });
    });
  }

  private _handleKeyboardMenuItemsEvent(e: KeyboardEvent) {
    if (!this._breakpointReached) {
      return;
    }

    const slottedItems = this.defaultSlotItems.filter(item => !item.hasAttribute("disabled"));
    const items = [this.menuHeaderButton, ...slottedItems];
    const itemLength = items.length;
    if (itemLength === 0) {
      return;
    }

    const firstItem = items[0];
    const lastItem = items[itemLength - 1].shadowRoot.querySelector(".dropdown-item") as HTMLElement;
    let activeElement = document.activeElement as HTMLElement;
    if (activeElement === this) {
      activeElement = this.shadowRoot.activeElement as HTMLElement;
    }

    switch (e.key) {
      case "Tab": {
        if (e.shiftKey) {
          if (activeElement === firstItem) {
            e.preventDefault();
            setTimeout(() => {
              lastItem.focus();
            }, 0);
          }
        } else {
          const activeShadowElement = activeElement.shadowRoot
            ? activeElement.shadowRoot.querySelector(".dropdown-item")
            : null;
          if (activeShadowElement && activeShadowElement === lastItem) {
            e.preventDefault();
            firstItem.focus();
          }
        }
        break;
      }
      default:
        break;
    }
  }

  private _copyTextToMenu() {
    this.menuHeaderText.innerHTML = this.togglerNodes[0].innerHTML;
  }

  private _hideDropdownMenuItems() {
    console.log(this.dropdownItems)
    this.dropdownItems.style.display = "none";
    this.dropdownItems.setAttribute("aria-hidden", "true");
  }

  private _resetDropdownMenu() {
    const navbarBody = this._getNavbarBody();
    if (navbarBody) {
      navbarBody.style.removeProperty("transform");
    }
  }

  private _handleKeyboardOpen(event: KeyboardEvent) {
    if (this.disabled) {
      return;
    }

    if (event.key === ENTER || event.key === SPACE) {
      event.preventDefault();
      this._openMenu();
    }
  }

  private _getNavbarBody() {
    const mainNav = document.querySelector("sgds-mainnav") as HTMLElement | null;

    if (!mainNav?.shadowRoot) {
      console.warn("sgds-mainnav or its shadowRoot not found");
      return;
    }

    const navbarBody = mainNav.shadowRoot.querySelector(".navbar-body") as HTMLElement;
    if (!navbarBody) {
      console.warn(".navbar-body not found in sgds-mainnav");
      return;
    }

    return navbarBody;
  }

  private _openMenu() {
    const navbarBody = this._getNavbarBody();
    navbarBody.style.transform = "translateX(-100%)";
    this.dropdownItems.style.removeProperty("display");
    this.dropdownItems.setAttribute("aria-hidden", "false");
    setTimeout(() => {
      this.menuHeaderButton.focus();
    }, 50);
  }

  private _handleHeaderKeyboardEvent(event: KeyboardEvent) {
    switch (event.key) {
      case TAB: {
        this._handleKeyboardMenuItemsEvent(event);
        break;
      }
      case ENTER:
      case SPACE: {
        event.preventDefault();
        this._closeMenu();
        break;
      }
      default:
        break;
    }
  }

  private _closeMenu() {
    console.log('closemenu')
    // 200ms delay as the transform transition is set to this timing
    this._resetDropdownMenu();
      this._hideDropdownMenuItems();
      this.navLink.focus();
  }

  render() {
    console.log("dropdown render")
    const mobileView = html`
      <a
        class="${classMap({
          "nav-link": true,
          active: this.active,
          disabled: this.disabled
        })}"
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        role="button"
        @click=${this._openMenu}
        @keydown=${this._handleKeyboardOpen}
      >
        <slot name="toggler"></slot>
        <sgds-icon name="chevron-right"></sgds-icon>
      </a>
      <div class="dropdown-items">
        <a tabindex="0" role="button" @click=${this._closeMenu} @keydown=${this._handleHeaderKeyboardEvent}>
          <sgds-icon name="chevron-left"></sgds-icon>
          <span></span>
        </a>
        <slot @slotchange=${this._handleSlotChange}></slot>
      </div>
    `;

    const desktopView = html`<sgds-dropdown
      .modifierOpt=${[
        {
          name: "offset",
          options: {
            offset: [0, 0]
          }
        }
      ]}
      ?disabled=${this.disabled}
    >
      <a
        class="${classMap({
          "nav-link": true,
          active: this.active,
          disabled: this.disabled
        })}"
        aria-disabled=${this.disabled ? "true" : "false"}
        id=${this.togglerId}
        tabindex=${this.disabled ? "-1" : "0"}
        role="button"
        slot="toggler"
      >
        <slot name="toggler"></slot>
        <sgds-icon name="chevron-down"></sgds-icon>
      </a>
      <slot @slotchange=${this._handleDesktopSlotChange}></slot>
    </sgds-dropdown>`;

    return this._breakpointReached ? mobileView : desktopView;
  }
}

export default SgdsMainnavDropdown;
