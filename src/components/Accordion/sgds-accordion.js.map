{"version":3,"file":"sgds-accordion.js","sourceRoot":"","sources":["sgds-accordion.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from \"lit\";\nimport { property, queryAssignedElements } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport type SgdsAccordionItem from \"./sgds-accordion-item\";\nimport accordionStyle from \"./accordion.css\";\n\nconst VALID_KEYS = [\"Enter\", \"ArrowUp\", \"ArrowLeft\", \"ArrowDown\", \"ArrowRight\"];\n\n/**\n * @summary A dropdown mechanism that allow users to either show or hide related content. `SgdsAccordion` is a wrapper to manage the behaviour for multiple `SgdsAccordionItems`\n * @slot default - slot for accordion-item\n *\n * @cssprop --sgds-accordion-bg - The background colour of the accordion\n * @cssprop --sgds-accordion-active-color - The colour of accordion when it is active\n * @cssprop --sgds-accordion-active-bg - The active background colour of accordion when it is active\n * @cssprop --sgds-accordion-border-color - The colour of all borders in the accordion\n * @cssprop --sgds-accordion-border-width - The thickness of border line of the accordion\n */\n\nexport class SgdsAccordion extends SgdsElement {\n  static styles = [...SgdsElement.styles, accordionStyle];\n\n  /** Allows multiple accordion items to be opened at the same time */\n  @property({ type: Boolean, reflect: true }) allowMultiple = false;\n\n  /** @internal */\n  @queryAssignedElements() private defaultNodes!: SgdsAccordionItem[];\n\n  /** @internal */\n  get items(): SgdsAccordionItem[] {\n    return [...(this.defaultNodes || [])].filter(\n      (node: HTMLElement) => typeof node.tagName !== \"undefined\"\n    ) as SgdsAccordionItem[];\n  }\n\n  firstUpdated() {\n    const items = [...this.items] as SgdsAccordionItem[];\n    items.forEach((item, index) => {\n      if (items.length > 1) {\n        switch (index) {\n          case 0:\n            item.setAttribute(\"first-of-type\", \"\");\n            break;\n\n          case items.length - 1:\n            item.setAttribute(\"last-of-type\", \"\");\n            break;\n\n          default:\n            item.setAttribute(\"nth-of-type\", \"\");\n        }\n      }\n    });\n  }\n\n  private async _onToggle(event: Event) {\n    if (this.allowMultiple) {\n      // No toggling when `allowMultiple` or the user prevents it.\n      return;\n    }\n    const items = [...this.items] as SgdsAccordionItem[];\n    if (items && !items.length) {\n      // no toggling when there aren't items.\n      return;\n    }\n    items.forEach(item => {\n      // Covers all elements within accordion-item\n      if (!event.composedPath().includes(item)) {\n        // Close all the items that didn't dispatch the event.\n        item.open = false;\n      }\n    });\n  }\n\n  private async _onKeyboardToggle(event: KeyboardEvent) {\n    if (!VALID_KEYS.includes(event.key)) return;\n    return this._onToggle(event);\n  }\n\n  render() {\n    return html`\n      <div\n        class=${classMap({\n          \"sgds accordion\": true\n        })}\n      >\n        <slot @click=${this._onToggle} @keydown=${this._onKeyboardToggle}></slot>\n      </div>\n    `;\n  }\n}\n\nexport default SgdsAccordion;\n"]}