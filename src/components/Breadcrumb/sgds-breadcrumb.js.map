{"version":3,"file":"sgds-breadcrumb.js","sourceRoot":"","sources":["sgds-breadcrumb.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,WAAW,MAAM,yBAAyB,CAAC;AAElD,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAC/C;;;;;;;;;;;GAWG;AACH,MAAM,OAAO,cAAe,SAAQ,WAAW;IAA/C;;QAEE,iEAAiE;QACrC,cAAS,GAAG,YAAY,CAAC;IA4DvD,CAAC;IArDC,6EAA6E;IACrE,aAAa;QACnB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAgB,CAAC;QAE3F,oCAAoC;QACpC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;QACvD,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QACnF,KAAK,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QACvC,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;QAEzB,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,iBAAiB;QACvB,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAC5E,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,sBAAsB,CACtC,CAAC;QAE1B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,gEAAgE;YAChE,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YAC3D,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,+BAA+B;gBAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;YACpC,CAAC;iBAAM,IAAI,SAAS,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC;gBAClD,yCAAyC;gBACzC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;YAC9C,CAAC;iBAAM,CAAC;gBACN,uDAAuD;YACzD,CAAC;YAED,iDAAiD;YAEjD,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC/B,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;wBACS,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;;8BAEnB,IAAI,CAAC,iBAAiB;;;;;;KAM/C,CAAC;IACJ,CAAC;;AA7DM,qBAAM,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,AAA3C,CAA4C;AAE7B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;iDAA0B;AAGtC;IAAd,KAAK,CAAC,MAAM,CAAC;mDAA8B;AAEX;IAAhC,KAAK,CAAC,wBAAwB,CAAC;qDAAgC;AAyDlE,eAAe,cAAc,CAAC","sourcesContent":["import { property, query } from \"lit/decorators.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { html } from \"lit/static-html.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport type SgdsBreadcrumbItem from \"./sgds-breadcrumb-item\";\nimport breadcrumbStyle from \"./breadcrumb.css\";\n/**\n * @summary Breadcrumbs help users to navigate and understand where they are on the current website or service.\n *\n * @slot default - The slot to pass in custom elements of `SgdsBreadcrumbItems`.\n * @slot separator - Defines all the separator of `SgdsBreadcrumbItems`. Defaults to \"/\"\n *\n * @csspart base - The nav element wrapper of `SgdsBreadcrumb`\n *\n * @cssprop --sgds-breadcrumb-padding-x - The x-axis padding of the breadcrumb\n * @cssprop --sgds-breadcrumb-padding-y - The y-axis padding of the breadcrumb\n *\n */\nexport class SgdsBreadcrumb extends SgdsElement {\n  static styles = [...SgdsElement.styles, breadcrumbStyle];\n  /** The aria-label of nav element within breadcrumb component. */\n  @property({ type: String }) ariaLabel = \"breadcrumb\";\n\n  /**@internal */\n  @query(\"slot\") defaultSlot: HTMLSlotElement;\n  /**@internal */\n  @query('slot[name=\"separator\"]') separatorSlot: HTMLSlotElement;\n\n  // Generates a clone of the separator element to use for each breadcrumb item\n  private _getSeparator() {\n    const separator = this.separatorSlot.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true) as HTMLElement;\n    [clone, ...clone.querySelectorAll(\"[id]\")].forEach(el => el.removeAttribute(\"id\"));\n    clone.setAttribute(\"data-default\", \"\");\n    clone.slot = \"separator\";\n\n    return clone;\n  }\n\n  private _handleSlotChange() {\n    const items = [...this.defaultSlot.assignedElements({ flatten: true })].filter(\n      item => item.tagName.toLowerCase() === \"sgds-breadcrumb-item\"\n    ) as SgdsBreadcrumbItem[];\n\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        // No separator exists, add one\n        item.append(this._getSeparator());\n      } else if (separator.hasAttribute(\"data-default\")) {\n        // A default separator exists, replace it\n        separator.replaceWith(this._getSeparator());\n      } else {\n        // The user provided a custom separator, leave it alone\n      }\n\n      // The last breadcrumb item is the \"current page\"\n\n      if (index === items.length - 1) {\n        item.setAttribute(\"aria-current\", \"page\");\n      } else {\n        item.removeAttribute(\"aria-current\");\n      }\n    });\n  }\n\n  render() {\n    return html`\n      <nav aria-label=${ifDefined(this.ariaLabel)} part=\"base\">\n        <div class=\"breadcrumb\">\n          <slot @slotchange=${this._handleSlotChange}></slot>\n          <slot name=\"separator\" hidden aria-hidden=\"true\">\n            <span>/</span>\n          </slot>\n        </div>\n      </nav>\n    `;\n  }\n}\n\nexport default SgdsBreadcrumb;\n"]}